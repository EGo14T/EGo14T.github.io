<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,EGo1ST!</title>
  
  
  <link href="https://ego1st.cn/atom.xml" rel="self"/>
  
  <link href="https://ego1st.cn/"/>
  <updated>2021-04-26T06:59:27.213Z</updated>
  <id>https://ego1st.cn/</id>
  
  <author>
    <name>EGo1ST</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020。2021，</title>
    <link href="https://ego1st.cn/2020/"/>
    <id>https://ego1st.cn/2020/</id>
    <published>2021-01-01T10:05:22.000Z</published>
    <updated>2021-04-26T06:59:27.213Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-mai2020"></div><script>$(function () {    $.ajax({        url: 'https://api.i-meto.com/meting/api?server=netease&type=song&id=1383893826',        success: function (list) {            var ap = new APlayer({                element: document.getElementById('aplayer-mai2020'),                showlrc: 3,                theme: '#8d7561',                music: list[0]            });            window.aplayers || (window.aplayers = []);            window.aplayers.push(ap);        }    })})</script><p>2020这个多灾多难的一年终于结束了</p><p>这一年，属实不易</p><p>愿明年，扭转乾坤</p><span id="more"></span><h1 id="zipper-mouth-face-瞎bb"><a href="#zipper-mouth-face-瞎bb" class="headerlink" title=":zipper_mouth_face:瞎bb"></a>:zipper_mouth_face:瞎bb</h1><p>2020刚开年，因为疫情在家办公（摸鱼），准备复工的时候提出了辞职。给经理打电话的时候，并没有挽留，一切都是那么的平淡。进入社会前第一次感觉到自己的渺小；尽管你在岗位上多么的努力，加再久的班，对于资本来说你就是个随时可以被换下的小螺丝。所以要努力去成为不可被替代的人！</p><p>之后就是在家浑浑噩噩的打游戏，吃喝拉撒睡。</p><p>觉得这样不行，就开始白天打游戏，深夜敲代码。没想到深夜敲代码的效率比白天高多了。</p><p>然后就是毕设答辩，本来很有信心去拿一个毕业设计，给大学四年划下一个完美的句号，事与愿违。你就是项目写的再认真，用的技术再厉害，也比不过“政治正确”的，花里胡哨的，契合老师思想的“优秀毕业设计”。就和当下比较火的“丁某”一样，引用知乎热评里的一句话“我们仇视什么，愤怒什么？是因为丁真吗？不！我们仇视的是这个稀烂的、价值扭曲的世界，我们愤怒，是因为我们收到了羞辱”</p><p>到了7月，准备进入职场，心里倒没什么感觉，也没有对家的留恋，也没有对爹妈的不舍。可能是从初中就开始住校，已经习惯了独来独往。倒是对朋友的依赖更多了，有天深夜跟在苏州刚工作的朋友电话，从电话里能听出他的孤独，想找个人聊天。毕竟一个人在一个城市里工作生活，难免会觉得孤独。到了上海，有两个校友一起合租，让我避免了孤独的窘境。</p><p>进入公司后，开始接触来自天南海北的同事。并不是所有的人都值得交朋友，有些仅仅是保持同事关系就够了。有些人可能在他看来是出于“好心”，但是完全不顾他人的感受的，那必然是合不来。不愿意给别人添麻烦的人，往往也不想让别人给自己添麻烦（is me）</p><p>没出校门时，以为全世界都是老二次元了，出了校门，原来就我一个二次元，想去CP27都没人陪。原来真的有人不看B站的，原来真的有人不打游戏的（:clown_face: 竟是我自己</p><p>现在的我说话也越来越谨慎，被职场磨平的棱角，高中时期那个人送外号“毒舌”的我已经不存在了。</p><p>也更加的理性了，在一些问题上考虑的也更多了，不会像高中时，脑子一热就做出决定了。不在大脑混乱的时候做决定，会冷静下来思考，可能是还没遇到那个让我神魂颠倒的人吧~</p><p>没有共情能力，在别人生气，烦恼的时候不知道该说些什么</p><p>不会聊天了，感觉跟某人聊天时已经出现了代沟，是我真的已经成为社会人，不会跟学生聊天了吗（问号脸</p><h1 id="card-index-dividers-总结"><a href="#card-index-dividers-总结" class="headerlink" title=":card_index_dividers:总结"></a>:card_index_dividers:总结</h1><h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><p>2020年提交了304次代码，主要是昕音乐的代码，还有博客的日常更新及依赖维护。LeetCode是没再刷了（大意了</p><p>在进入岗位之后，学习了企业应用的开发规范，觉得之前写的代码像一坨:shit: ，遂决定重构代码，前端跟后端</p><p>前端主要重构接口，如果还有精力的话，还需要深入学习下vue，把各个模块写成组件来重构</p><p>后端主要重构接口，将公共的资源，类提取出来，替换掉之前使用的lombok，以及mybatis generator，手写业务SQL，在各个业务模块中加入缓存、日志、加上个性化配置的功能（flag）</p><p>今年还要给博客增加一个评论系统，技术栈已经想好了（Go + React）实现，应该利用业余时间，两个月差不多可以完成上线（期待吧~）</p><p><img src="http://cdn.ego1st.cn//postImg/image-20210121161631503.png" alt="image-20210121161631503"></p><h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>到上海这边公司有食堂，最开始伙食还不错，到后面感觉饭菜不如刚来的时候，所以体重也没太大的变化，基本是在120斤上下浮动</p><p>今年还拔了智齿，刷B乎关于拔智齿的回答，有人因为拔支持伤到神经了，导致终身面瘫，舌头没有知觉。吓得我都不敢拔了。去医院，医生看了看片子，说智齿离神经比较近，可能会伤到神经，问我想好没有，当时我就吓得一哆嗦，奈何牙痛难忍，还是签了确认书。医生姐姐很专业，半小时就拔完了，当天麻药过了，也没有网上说的这么疼，我还专门买了布洛芬。睡完觉起来没什么不适，拔的很完美！感谢徐汇区牙防所的医生！</p><p>还去医院看了痘痘，医生给我开的药我都有（嘿嘿）果然久病成医啊，现在痘痘基本都消了，只剩原来手贱留下的痘印了，战痘还在继续，同志还须努力！</p><p>今年23了，希望自己窜一窜！身体健康！远离新冠！</p><h2 id="看过的"><a href="#看过的" class="headerlink" title="看过的"></a>看过的</h2><p>今年看了35部动画，25部电影，10部电视剧，3部纪录片。</p><p>由于B站今年没有展示出来。。我也不知道我都看了啥，应该是老番居多吧，</p><p>看的综艺，《说唱新世代》印象挺深刻的</p><p>《堀与宫村》有成为我心目中的精神食粮的潜力</p><p>电视剧的话，《校阅女孩河野悦子》《逃避可耻但有用》《刑事ZERO》《东京大饭店》都不错！</p><p>电影印象深刻的有《绿皮书》《怦然心动》《源代码》</p><p>其中《砰然心动》里有句话：</p><p>斯人若彩虹，遇上方知有</p><p>挺好的~</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>2020年真的是发生了很多事情，有愉快的，有不愉快的，不管怎样，它都已经过去，过去的就让它过去吧，活在当下，放眼未来~</p><p>进入职场后，感觉到了生活的压力，花钱也不大手大脚了，为人处事也变得谨慎了，不再像以前那么莽撞了。</p><p>愿2021年，工资翻翻，身体健康~</p><p>也祝家人们，朋友们天天开心~</p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;aplayer&quot; id=&quot;aplayer-mai2020&quot;&gt;&lt;/div&gt;
&lt;script&gt;
$(function () {
    $.ajax({
        url: &#39;https://api.i-meto.com/meting/api?server=netease&amp;type=song&amp;id=1383893826&#39;,
        success: function (list) {
            var ap = new APlayer({
                element: document.getElementById(&#39;aplayer-mai2020&#39;),
                showlrc: 3,
                theme: &#39;#8d7561&#39;,
                music: list[0]
            });
            window.aplayers || (window.aplayers = []);
            window.aplayers.push(ap);
        }
    })
})
&lt;/script&gt;





&lt;p&gt;2020这个多灾多难的一年终于结束了&lt;/p&gt;
&lt;p&gt;这一年，属实不易&lt;/p&gt;
&lt;p&gt;愿明年，扭转乾坤&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Gateway路由配置从数据库或Redis获取</title>
    <link href="https://ego1st.cn/GatewayRoutesFromDatabase/"/>
    <id>https://ego1st.cn/GatewayRoutesFromDatabase/</id>
    <published>2020-11-16T11:48:15.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>目前SpringCloud Gateway只支持配置文件yml、properties和配置文件@Configuration的方式配置路由。这种方式有弊端，就是如果需要变更路由信息，修改路由规则，然后重启Gateway，修改或增加的路由规则才会生效。如果出现该问题，在Gateway重启的这段时间里，所有接入Gateway服务的应用都不可用。这肯定是不可行的。</p><span id="more"></span><h1 id="Gateway默认的配置"><a href="#Gateway默认的配置" class="headerlink" title="Gateway默认的配置"></a>Gateway默认的配置</h1><h2 id="yml配置文件"><a href="#yml配置文件" class="headerlink" title="yml配置文件"></a>yml配置文件</h2><p><img src="http://cdn.ego1st.cn//postImg/image-20201116172741310.png" alt="image-20201116172741310"></p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p><img src="http://cdn.ego1st.cn//postImg/image-20201116172929915.png" alt="image-20201116172929915"></p><h1 id="路由初始化"><a href="#路由初始化" class="headerlink" title="路由初始化"></a>路由初始化</h1><p>不管是什么方式配置路由，这些配置最后都会被封装到<code>RouteDefinition</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteDefinition</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="keyword">private</span> List&lt;PredicateDefinition&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="meta">@Valid</span></span><br><span class="line"><span class="keyword">private</span> List&lt;FilterDefinition&gt; filters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="meta">@NotNull</span></span><br><span class="line"><span class="keyword">private</span> URI uri;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; metadata = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> order = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RouteDefinition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个路由配置就是一个<code>RouteDefinition</code>对象，一个<code>RouteDefinition</code>对应一个ID，如果不设置，默认为uuid，所有路由信息在系统启动的时候被加载进内存里</p><p><img src="http://cdn.ego1st.cn//postImg/image-20201116173926638.png" alt="image-20201116173926638"></p><p>如图框住的部分就是加载yml文件，它返回<code>PropertiesRouteDefinitionLocator</code>对象，该对象实现<code>RouteDefinitionLocator</code>接口，该接口是路由的装载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RouteDefinitionLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该接口只有一个方法，就是获取路由配置，该接口有多个实现类，分别对应不同的配置路由的方式</p><p><img src="http://cdn.ego1st.cn//postImg/image-20201116174349683.png" alt="image-20201116174349683"> </p><ol><li>CachingRouteDefinitionLocator -RouteDefinitionLocator包装类， 缓存目标RouteDefinitionLocator 为routeDefinitions提供缓存功能 </li><li>CompositeRouteDefinitionLocator -RouteDefinitionLocator包装类，组合多种 RouteDefinitionLocator 的实现，为 routeDefinitions提供统一入口</li><li>PropertiesRouteDefinitionLocator-从配置文件(GatewayProperties 例如，YML / Properties 等 ) 读取RouteDefinition </li><li>DiscoveryClientRouteDefinitionLocator-从注册中心( 例如，Eureka / Consul / Zookeeper / Etcd 等 )读取RouteDefinition</li><li>RouteDefinitionRepository-从存储器( 例如，内存 / Redis / MySQL 等 )读取RouteDefinition</li></ol><p>初始化顺序是</p><ol><li>配置文件加载初始化 PropertiesRouteDefinitionLocator–&gt;CompositeRouteDefinitionLocator </li><li>存储器中加载初始化RouteDefinitionRepository–&gt;CompositeRouteDefinitionLocator </li><li>注册中心加载初始化DiscoveryClientRouteDefinitionLocator–&gt;CompositeRouteDefinitionLocator</li></ol><p>而使用存储器中初始化的条件是，没有定义<code>RouteDefinitionRepository</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(RouteDefinitionRepository.class)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InMemoryRouteDefinitionRepository <span class="title">inMemoryRouteDefinitionRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> InMemoryRouteDefinitionRepository();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="路由配置从数据库中获取"><a href="#路由配置从数据库中获取" class="headerlink" title="路由配置从数据库中获取"></a>路由配置从数据库中获取</h1><p>因此，我们可以通过实现<code>RouteDefinitionRepository</code>接口来自定义路由配置的获取方式</p><h2 id="实现RouteDefinitionRepository接口"><a href="#实现RouteDefinitionRepository接口" class="headerlink" title="实现RouteDefinitionRepository接口"></a>实现RouteDefinitionRepository接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBARouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GatewayDao gatewayDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;RouteDefinition&gt; <span class="title">getRouteDefinitions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RouteDefinition&gt; gatewayRouteEntityList = getRouteConfig();</span><br><span class="line">        <span class="keyword">return</span> Flux.fromIterable(gatewayRouteEntityList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;RouteDefinition&gt; <span class="title">getRouteConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;RoutesEntity&gt; routesEntities = gatewayDao.queryAllRoutes();</span><br><span class="line"></span><br><span class="line">        List&lt;RouteDefinition&gt; definitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装RouteDefinition</span></span><br><span class="line">        <span class="keyword">for</span> (RoutesEntity entity : routesEntities) &#123;</span><br><span class="line">            RouteDefinition definition = <span class="keyword">new</span> RouteDefinition();</span><br><span class="line"></span><br><span class="line">            Map&lt;String,String&gt; predicateParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            PredicateDefinition predicate = <span class="keyword">new</span> PredicateDefinition();</span><br><span class="line"></span><br><span class="line">            Map&lt;String,String&gt; filterParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            FilterDefinition filter = <span class="keyword">new</span> FilterDefinition();</span><br><span class="line"></span><br><span class="line">            URI uri = UriComponentsBuilder.fromHttpUrl(entity.getUri()).build().toUri();</span><br><span class="line"></span><br><span class="line">            predicate.setName(<span class="string">&quot;Path&quot;</span>);</span><br><span class="line">            predicateParams.put(<span class="string">&quot;pattern&quot;</span>,entity.getPredicates());</span><br><span class="line">            predicate.setArgs(predicateParams);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//过滤暂时不写</span></span><br><span class="line">            <span class="comment">//filter.setName(&quot;StripPrefix&quot;);</span></span><br><span class="line">            <span class="comment">//TODO 动态过滤</span></span><br><span class="line"></span><br><span class="line">            definition.setPredicates(Arrays.asList(predicate));</span><br><span class="line">            <span class="comment">//definition.setFilters();</span></span><br><span class="line"></span><br><span class="line">            definition.setUri(uri);</span><br><span class="line">            definition.setId(entity.getRouteId());</span><br><span class="line"></span><br><span class="line">            definitions.add(definition);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> definitions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">delete</span><span class="params">(Mono&lt;String&gt; routeId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBARouteConfigService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GatewayDao gatewayDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(RoutesEntity entity)</span></span>&#123;</span><br><span class="line">        gatewayDao.create(entity);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String routeId)</span> </span>&#123;</span><br><span class="line">        gatewayDao.deleteByRouteId(routeId);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(RoutesEntity entity)</span> </span>&#123;</span><br><span class="line">        gatewayDao.updateRouteById(entity);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationEventPublisher</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据库中修改删除路由配置，然后再执行一下<code>RefreshRoutesEvent</code>事件，即可刷新路由配置，无需重启，立刻生效</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;目前SpringCloud Gateway只支持配置文件yml、properties和配置文件@Configuration的方式配置路由。这种方式有弊端，就是如果需要变更路由信息，修改路由规则，然后重启Gateway，修改或增加的路由规则才会生效。如果出现该问题，在Gateway重启的这段时间里，所有接入Gateway服务的应用都不可用。这肯定是不可行的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SpringCloud" scheme="https://ego1st.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud之Feign 转发请求头(header参数)</title>
    <link href="https://ego1st.cn/Feign-header/"/>
    <id>https://ego1st.cn/Feign-header/</id>
    <published>2020-08-16T11:38:54.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>在做接口请求时，我们经常会在header头中增加一些鉴权信息，如token 或 jwt，那么在通过fegin从A server去调用B server的接口时，如果B server的接口需要header信息，我们需要将A sever获取的header转发到B上。</p><span id="more"></span><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>我们需要实现Feign提供的一个接口<code>RequestInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfiguration</span> <span class="keyword">implements</span> <span class="title">RequestInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">                ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class="line">                        .getRequestAttributes();</span><br><span class="line">                HttpServletRequest request = attributes.getRequest();</span><br><span class="line">                Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class="line">                <span class="keyword">if</span> (headerNames != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">                        String name = headerNames.nextElement();</span><br><span class="line">                        String values = request.getHeader(name);</span><br><span class="line">                        template.header(name, values);</span><br><span class="line"> </span><br><span class="line">                    &#125;</span><br><span class="line">                    logger.info(<span class="string">&quot;feign interceptor header:&#123;&#125;&quot;</span>,template);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在<code>@FeignClient</code>注解里面的属性加上<code>configuration = FeignConfiguration.class</code>就可以了。如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;xinmusic-music&quot;,configuration = FeignConfig.class)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/music&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MusicService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在做接口请求时，我们经常会在header头中增加一些鉴权信息，如token 或 jwt，那么在通过fegin从A server去调用B server的接口时，如果B server的接口需要header信息，我们需要将A sever获取的header转发到B上。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SpringCloud" scheme="https://ego1st.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性——Optional</title>
    <link href="https://ego1st.cn/LearnJava8New3/"/>
    <id>https://ego1st.cn/LearnJava8New3/</id>
    <published>2020-07-30T15:32:50.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java8-Optional"><a href="#Java8-Optional" class="headerlink" title="Java8 Optional"></a>Java8 Optional</h1><p>Optional是一个包装类。类中包装的对象可以为<code>null</code>也可以为<code>非null</code>，简单来讲就是把<code>null</code>封装了一层， 防止出现空指针异常</p><span id="more"></span><h2 id="Optional优化null判断"><a href="#Optional优化null判断" class="headerlink" title="Optional优化null判断"></a>Optional优化null判断</h2><p>看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAge</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == student)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Unkown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">return</span> student.getAge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法获取学生年龄，为了防止Student对象为空，做了防御性检查，我们可以使用Optional优化该段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getAge</span><span class="params">(Student student)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> Optional.ofNullable(student).map(Student::getAge()).orElse(<span class="string">&quot;Unkown&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Optional结合Lambda表达式，可以让代码看起来更加优雅</p><h2 id="创建Optional对象"><a href="#创建Optional对象" class="headerlink" title="创建Optional对象"></a>创建Optional对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional&lt;?&gt; EMPTY = <span class="keyword">new</span> Optional&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Optional&lt;T&gt; <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = Objects.requireNonNull(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">of</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Optional&lt;&gt;(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Optional类的构造方法设置为了私有，所以不能通过<code>new</code>来创建，它提供了三个静态方法来创建Optional对象，<code>of(T value)</code>、<code>ofNullable(T value)</code>、<code>empty(T value)</code></p><ol><li><code>of(T value)</code>：创建一个包装值非<code>null</code>的Optional对象</li><li><code>ofNullable(T value)</code>：创建一个包装值可以为<code>null</code>的Optional对象</li><li><code>empty(T value)</code>：创建一个包装值为<code>null</code>的Optional对象</li></ol><h2 id="Optional类的常用方法"><a href="#Optional类的常用方法" class="headerlink" title="Optional类的常用方法"></a>Optional类的常用方法</h2><ol><li><p><code>T get()</code>：获取Optional对象的包装值，如果包装值为<code>null</code>，则抛出<code>NoSuchElementException(&quot;No value present&quot;);</code>异常</p></li><li><p><code>boolean isPresent()</code>：判断Optional对象的包装值是否为<code>null</code></p></li><li><p><code>void ifPresent(Consumer&lt;? super T&gt; consumer)</code>：如果Optional包装值不为<code>null</code>，则执行一些动作，否则什么也不做</p></li><li><p><code>Optional&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code>：<code>filter</code>接受一个<code>Predicate</code>对象，可以实现对Optional对象包装值的过滤，如果满足条件则返回该Optional对象，不满足则返回空Optional对象</p></li><li><p><code>Optional&lt;U&gt; map(Function&lt;? super T, ? extends U&gt; mapper)</code>：<code>map</code>方法传入一个函数进行运算，如果Optional对象的包装值为<code>null</code>，或经过函数运算后返回值为<code>null</code>则返回一个包装值为<code>null</code>的Optional对象，否则返回经函数处理后的Optional对象，包装对象的类型可能改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; map = Optional.ofNullable(student).map(Student::getAge);</span><br></pre></td></tr></table></figure></li><li><p><code>Optional&lt;U&gt; flatMap(Function&lt;? super T, Optional&lt;U&gt;&gt; mapper)</code>：<code>flatMap</code>方法类似于<code>map</code>方法，但是该方法可以返回一个新的Optional对象，举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; flatmap = Optional.ofNullable(student)</span><br><span class="line">       .flatMap(s-&gt; Optional.ofNullable(s.getAge()));</span><br></pre></td></tr></table></figure><p>注意：<code>flatmap</code>和<code>map</code>的区别是<code>map</code>方法返回值自动封装为Optional对象，而<code>flatmap</code>方法需要手动封装为Optional对象</p></li><li><p><code>T orElse(T other)</code>：如果Optional对象包装值不为<code>null</code>则返回包装值，否则返回<code>other</code></p></li><li><p><code>T orElseGet(Supplier&lt;? extends T&gt; other)</code>：与<code>orElse</code>的区别是将<code>Supplier</code>的<code>get</code>方法的返回值作为默认值</p></li><li><p><code>T orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code>：Optional对象包装值为<code>null</code>时，抛出异常，示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional.ofNullable(student).map(u -&gt; u.getAge()).orElseThrow(() -&gt; <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Unkown&quot;</span>));</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java8-Optional&quot;&gt;&lt;a href=&quot;#Java8-Optional&quot; class=&quot;headerlink&quot; title=&quot;Java8 Optional&quot;&gt;&lt;/a&gt;Java8 Optional&lt;/h1&gt;&lt;p&gt;Optional是一个包装类。类中包装的对象可以为&lt;code&gt;null&lt;/code&gt;也可以为&lt;code&gt;非null&lt;/code&gt;，简单来讲就是把&lt;code&gt;null&lt;/code&gt;封装了一层， 防止出现空指针异常&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java8新特性" scheme="https://ego1st.cn/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性——Stream流</title>
    <link href="https://ego1st.cn/LearnJava8New2/"/>
    <id>https://ego1st.cn/LearnJava8New2/</id>
    <published>2020-06-12T13:40:55.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h1><p>Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。</p><p>Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</p><span id="more"></span><h2 id="什么是Stream流"><a href="#什么是Stream流" class="headerlink" title="什么是Stream流"></a>什么是Stream流</h2><p>Stream 是对集合(Collection)对象功能的增强。</p><p>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p><p>这种风格将要处理的元素集合看作一种流， 流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。</p><p>元素流在管道中经过中间操作（intermediate operation）的处理，最后由最终操作(terminal operation)得到前面处理的结果。</p><p>举个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream()</span><br><span class="line">       .filter(string -&gt; !string.isEmpty())</span><br><span class="line">                               .collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>上面得到的结果是把<code>strings</code>中不为空的筛选出来；</p><p>Stream对数据的处理流程如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br><span class="line">| stream of elements +-----&gt; |filter+-&gt; |sorted+-&gt; |map+-&gt; |collect|</span><br><span class="line">+--------------------+       +------+   +------+   +---+   +-------+</span><br></pre></td></tr></table></figure><h2 id="如何获得Stream流"><a href="#如何获得Stream流" class="headerlink" title="如何获得Stream流"></a>如何获得Stream流</h2><p>在Java8中，有三种方法生成Stream流</p><ol><li><p>通过<code>Collection</code>系列集合提供的<code>stream()</code>和<code>parallelStream()</code>方法获得流</p><p>其中通过<code>stream()</code>方法生成的是串行流，通过<code>parallelStream()</code>方法生成的是并行流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br><span class="line">Stream&lt;String&gt; stream2 = list.`parallelStream();</span><br></pre></td></tr></table></figure></li><li><p>通过<code>Arrays</code>中的静态方法<code>stream()</code>获得流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Music[] music = <span class="keyword">new</span> Music[<span class="number">10</span>];</span><br><span class="line">Stream&lt;Music&gt; stream3 = Arrays.stream(music);</span><br></pre></td></tr></table></figure></li><li><p>通过Stream类中的静态方法<code>of()</code>获得流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream4 = Stream.of(<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>还有两种方法创建无限流</p><ol><li><p>迭代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream5 = Stream.iterate(<span class="number">0</span>,(x)-&gt;x+<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p>生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Double&gt; stream6 = Stream.generate(() -&gt; Math.random());</span><br></pre></td></tr></table></figure></li></ol><p>讲完了如何获得流，下面我们来讲Stream流的中间操作</p><h2 id="Stream流的中间操作"><a href="#Stream流的中间操作" class="headerlink" title="Stream流的中间操作"></a>Stream流的中间操作</h2><p>Stream流的中间操作包括：</p><ol><li>筛选与切片</li><li>映射</li><li>排序</li></ol><p>首先定义一个<code>Music</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Music</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String singer;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">public</span> Status status;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Status</span> </span>&#123;</span><br><span class="line">        FREE,</span><br><span class="line">        BUSY</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//get,set,toString,equals,hashCode,构造器省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个<code>List&lt;Music&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Music&gt; music = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌1&quot;</span>,<span class="string">&quot;手1&quot;</span>,<span class="number">1</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌2&quot;</span>,<span class="string">&quot;手2&quot;</span>,<span class="number">20</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌3&quot;</span>,<span class="string">&quot;手3&quot;</span>,<span class="number">30</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌4&quot;</span>,<span class="string">&quot;手4&quot;</span>,<span class="number">40</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌5&quot;</span>,<span class="string">&quot;手5&quot;</span>,<span class="number">50</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌6&quot;</span>,<span class="string">&quot;手6&quot;</span>,<span class="number">60</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌6&quot;</span>,<span class="string">&quot;手6&quot;</span>,<span class="number">70</span>),</span><br><span class="line">        <span class="keyword">new</span> Music(<span class="string">&quot;歌6&quot;</span>,<span class="string">&quot;手6&quot;</span>,<span class="number">60</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><ol><li><p><code>filter</code>：接收Lambda，从流中排除某些元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//内部迭代：迭代操作由Stream API完成</span></span><br><span class="line">music.stream()</span><br><span class="line">               .filter((e)-&gt;e.getNum()&gt;<span class="number">10</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>limit</code>：截断流，使其元素不超过给定数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//limit操作拿到给定数量的值后，就不再继续执行称为短路操作&quot;</span></span><br><span class="line">   music.stream()</span><br><span class="line">        .filter((e)-&gt;&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;短路!);</span></span><br><span class="line"><span class="string">                return e.getNum()&gt;10;&#125;)</span></span><br><span class="line"><span class="string">        .limit(2)</span></span><br><span class="line"><span class="string">        .forEach(System.out::println);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>skip</code>：跳过元素，返回一个扔掉了前n个元素的流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/// 若流中元素不足n个，则返回一个空流，与limit(n)互补</span></span><br><span class="line">    music.stream()</span><br><span class="line">            .filter((e)-&gt;e.getNum()&gt;<span class="number">10</span>)</span><br><span class="line">            .skip(<span class="number">2</span>)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>distinct</code>筛选，通过流生成元素的hashCode()和equals()去除重复元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    music.stream()</span><br><span class="line">            .filter((e)-&gt;e.getNum()&gt;<span class="number">10</span>)</span><br><span class="line">            .skip(<span class="number">2</span>)</span><br><span class="line">            .distinct()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><ol><li><p><code>map</code>：接收Lambda，将元素转换成其他形式或提取信息。接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//把list中的元素转换为大写</span></span><br><span class="line">     List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">     list.stream()</span><br><span class="line">             .map(s -&gt; s.toUpperCase())</span><br><span class="line">             .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>flatMap</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有的流连接成一个流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .flatMap(StreamLearn2::filterCharater)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">filterCharater</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">     List&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Character ch :</span><br><span class="line">            str.toCharArray()) &#123;</span><br><span class="line">        list.add(ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list.stream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li><p><code>sorted</code>：自然排序（Comparable）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    list.stream()</span><br><span class="line">            .sorted()</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>sorted(Comparator com)</code>：定制排序（Comparator）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    music.stream()</span><br><span class="line">            .sorted((e1,e2)-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span> (e1.getName().equals(e2.getName()))&#123;</span><br><span class="line">                    <span class="keyword">return</span> e1.getNum().compareTo(e2.getNum());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> e1.getName().compareTo(e2.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Stream流的终止操作"><a href="#Stream流的终止操作" class="headerlink" title="Stream流的终止操作"></a>Stream流的终止操作</h2><p>Stream流的终止操作包括</p><ol><li>查找与匹配</li><li>归约</li><li>收集</li></ol><h3 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h3><ol><li><p><code>allMatch</code>：检查是否匹配所有元素，必须全部满足才返回<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> b1 = music.stream()</span><br><span class="line">            .allMatch(e-&gt;e.getStatus().equals(Music.Status.BUSY));</span><br><span class="line">    System.out.println(b1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>anyMatch</code>：检查是否匹配至少一个元素，只要有一个元素满足条件就返回<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> b2 = music.stream()</span><br><span class="line">            .anyMatch(e-&gt;e.getStatus().equals(Music.Status.BUSY));</span><br><span class="line">    System.out.println(b2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>noneMatch</code>：检查是否没有匹配所有元素，全部不满足才返回<code>true</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> b3 = music.stream()</span><br><span class="line">            .noneMatch(e-&gt;e.getStatus().equals(Music.Status.BUSY));</span><br><span class="line">    System.out.println(b3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>findFirst</code>：返回第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Music&gt; optional = music.stream()</span><br><span class="line">            .sorted((e1, e2) -&gt; e1.getNum().compareTo(e2.getNum()))</span><br><span class="line">            .findFirst();</span><br><span class="line"></span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>findAny</code>：返回任意一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Music&gt; optional = music.stream()</span><br><span class="line">            .filter(e -&gt; e.getStatus().equals(Music.Status.FREE))</span><br><span class="line">            .findAny();</span><br><span class="line"></span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>count</code>：返回流元素的总个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> count = music.stream()</span><br><span class="line">            .filter(e -&gt; e.getStatus().equals(Music.Status.FREE))</span><br><span class="line">            .count();</span><br><span class="line"></span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>max</code>：返回流中元素的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Music&gt; max = music.stream()</span><br><span class="line">            .max((e1, e2) -&gt; Integer.compare(e1.getNum(), e2.getNum()));</span><br><span class="line">    System.out.println(max.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>min</code>：返回流中元素的最小值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Integer&gt; min = music.stream()</span><br><span class="line">            .map(Music::getNum)</span><br><span class="line">            .min(Integer::compare);</span><br><span class="line">    System.out.println(min.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><p><code>reduce</code>：可以将流中的元素反复结合起来，得到一个值</p><ol><li><p><code> Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Integer&gt; optional = music.stream()</span><br><span class="line">        .map(Music::getNum)</span><br><span class="line">        .reduce(Integer::sum);</span><br><span class="line">System.out.println(optional.get());</span><br></pre></td></tr></table></figure><p>可能为<code>null</code>，返回<code>Optional</code></p></li><li><p><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer reduce = music.stream()</span><br><span class="line">        .map(Music::getNum)</span><br><span class="line">        .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);</span><br></pre></td></tr></table></figure><p>起始值为0，返回对应类型</p></li><li><p><code>&lt;U&gt; U reduce(U identity, BiFunction&lt;U, ? super T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; newList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Integer&gt; accResult_ = Stream.of(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">            .reduce(newList,</span><br><span class="line">                    (acc, item) -&gt; &#123;</span><br><span class="line">                        acc.add(item);</span><br><span class="line">                        System.out.println(<span class="string">&quot;item: &quot;</span> + item);</span><br><span class="line">                        System.out.println(<span class="string">&quot;acc+ : &quot;</span> + acc);</span><br><span class="line">                        System.out.println(<span class="string">&quot;BiFunction&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> acc;</span><br><span class="line">                    &#125;, (acc, item) -&gt; <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;accResult_: &quot;</span> + accResult_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">item: <span class="number">2</span></span><br><span class="line">acc+ : [<span class="number">2</span>]</span><br><span class="line">BiFunction</span><br><span class="line">item: <span class="number">3</span></span><br><span class="line">acc+ : [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">BiFunction</span><br><span class="line">item: <span class="number">4</span></span><br><span class="line">acc+ : [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">BiFunction</span><br><span class="line">accResult_: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>首先看一下BiFunction的三个泛型类型分别是U、 ? super T、U，参考BiFunction函数式接口apply方法定义可以知道，累加器通过类型为U和? super T的两个输入值计算得到一个U类型的结果返回。也就是说这种reduce方法，提供一个不同于Stream中数据类型的初始值，通过累加器规则迭代计算Stream中的数据，最终得到一个同初始值同类型的结果</p></li></ol><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><ol><li><p><code>collect</code>：将流转化为其他形式。接受一个Collector接口的实现，用于给Stream中元素做汇总的方法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;String&gt; collect = music.stream()</span><br><span class="line">            .map(Music::getName)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    HashSet&lt;String&gt; collect1 = music.stream()</span><br><span class="line">            .map(Music::getName)</span><br><span class="line">            .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line">    collect.forEach(System.out::println);</span><br><span class="line">    collect1.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">歌<span class="number">1</span></span><br><span class="line">歌<span class="number">2</span></span><br><span class="line">歌<span class="number">3</span></span><br><span class="line">歌<span class="number">4</span></span><br><span class="line">歌<span class="number">5</span></span><br><span class="line">歌<span class="number">6</span></span><br><span class="line">歌<span class="number">4</span></span><br><span class="line">歌<span class="number">5</span></span><br><span class="line">歌<span class="number">6</span></span><br><span class="line">歌<span class="number">1</span></span><br><span class="line">歌<span class="number">2</span></span><br><span class="line">歌<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>groupingBy</code>：分组&amp;多级分组</p><p> 分组，按照相同的属性进行分组</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupTest1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Music.Status, List&lt;Music&gt;&gt; collect = music.stream()</span><br><span class="line">            .collect(Collectors.groupingBy(Music::getStatus));</span><br><span class="line"></span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;BUSY=[Music&#123;name=<span class="string">&#x27;歌1&#x27;</span>, singer=<span class="string">&#x27;手1&#x27;</span>, num=<span class="number">1</span>, status=BUSY&#125;, Music&#123;name=<span class="string">&#x27;歌3&#x27;</span>, singer=<span class="string">&#x27;手3&#x27;</span>, num=<span class="number">30</span>, status=BUSY&#125;, Music&#123;name=<span class="string">&#x27;歌4&#x27;</span>, singer=<span class="string">&#x27;手4&#x27;</span>, num=<span class="number">40</span>, status=BUSY&#125;], FREE=[Music&#123;name=<span class="string">&#x27;歌2&#x27;</span>, singer=<span class="string">&#x27;手2&#x27;</span>, num=<span class="number">20</span>, status=FREE&#125;, Music&#123;name=<span class="string">&#x27;歌5&#x27;</span>, singer=<span class="string">&#x27;手5&#x27;</span>, num=<span class="number">50</span>, status=FREE&#125;, Music&#123;name=<span class="string">&#x27;歌6&#x27;</span>, singer=<span class="string">&#x27;手6&#x27;</span>, num=<span class="number">60</span>, status=FREE&#125;]&#125;</span><br></pre></td></tr></table></figure><p> 多级分组，首先按照相同的属性分组，然后再按照条件分，或者还可以按照属性分，嵌套下去</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">groupTest2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Music.Status, Map&lt;String, List&lt;Music&gt;&gt;&gt; collect = music.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Music::getStatus, </span><br><span class="line">             Collectors.groupingBy(e -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.getNum() &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;高产&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;低产&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;)));</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;BUSY=&#123;低产=[Music&#123;name=<span class="string">&#x27;歌1&#x27;</span>, singer=<span class="string">&#x27;手1&#x27;</span>, num=<span class="number">1</span>, status=BUSY&#125;], 高产=[Music&#123;name=<span class="string">&#x27;歌3&#x27;</span>, singer=<span class="string">&#x27;手3&#x27;</span>, num=<span class="number">30</span>, status=BUSY&#125;, Music&#123;name=<span class="string">&#x27;歌4&#x27;</span>, singer=<span class="string">&#x27;手4&#x27;</span>, num=<span class="number">40</span>, status=BUSY&#125;]&#125;, FREE=&#123;低产=[Music&#123;name=<span class="string">&#x27;歌2&#x27;</span>, singer=<span class="string">&#x27;手2&#x27;</span>, num=<span class="number">20</span>, status=FREE&#125;], 高产=[Music&#123;name=<span class="string">&#x27;歌5&#x27;</span>, singer=<span class="string">&#x27;手5&#x27;</span>, num=<span class="number">50</span>, status=FREE&#125;, Music&#123;name=<span class="string">&#x27;歌6&#x27;</span>, singer=<span class="string">&#x27;手6&#x27;</span>, num=<span class="number">60</span>, status=FREE&#125;]&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>partitioningBy</code>：分区，符合条件的放在一起，不符合条件的放在一起</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">partTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;Boolean, List&lt;Music&gt;&gt; collect = music.stream()</span><br><span class="line">            .collect(Collectors.partitioningBy(e -&gt; e.getNum() &gt; <span class="number">30</span>));</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">false</span>=[Music&#123;name=<span class="string">&#x27;歌1&#x27;</span>, singer=<span class="string">&#x27;手1&#x27;</span>, num=<span class="number">1</span>, status=BUSY&#125;, Music&#123;name=<span class="string">&#x27;歌2&#x27;</span>, singer=<span class="string">&#x27;手2&#x27;</span>, num=<span class="number">20</span>, status=FREE&#125;, Music&#123;name=<span class="string">&#x27;歌3&#x27;</span>, singer=<span class="string">&#x27;手3&#x27;</span>, num=<span class="number">30</span>, status=BUSY&#125;], <span class="keyword">true</span>=[Music&#123;name=<span class="string">&#x27;歌4&#x27;</span>, singer=<span class="string">&#x27;手4&#x27;</span>, num=<span class="number">40</span>, status=BUSY&#125;, Music&#123;name=<span class="string">&#x27;歌5&#x27;</span>, singer=<span class="string">&#x27;手5&#x27;</span>, num=<span class="number">50</span>, status=FREE&#125;, Music&#123;name=<span class="string">&#x27;歌6&#x27;</span>, singer=<span class="string">&#x27;手6&#x27;</span>, num=<span class="number">60</span>, status=FREE&#125;]&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>join</code>连接，将结果，以什么字符开头，结尾，和分割</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">joinTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String collect = music.stream()</span><br><span class="line">            .map(Music::getName)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(collect);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行结果：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[歌<span class="number">1</span>,歌<span class="number">2</span>,歌<span class="number">3</span>,歌<span class="number">4</span>,歌<span class="number">5</span>,歌<span class="number">6</span>]</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Stream流&quot;&gt;&lt;a href=&quot;#Stream流&quot; class=&quot;headerlink&quot; title=&quot;Stream流&quot;&gt;&lt;/a&gt;Stream流&lt;/h1&gt;&lt;p&gt;Java 8 API添加了一个新的抽象称为流Stream，可以让你以一种声明的方式处理数据。&lt;/p&gt;
&lt;p&gt;Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java8新特性" scheme="https://ego1st.cn/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java8新特性——Lambda表达式</title>
    <link href="https://ego1st.cn/LearnJava8New1/"/>
    <id>https://ego1st.cn/LearnJava8New1/</id>
    <published>2020-05-14T16:31:20.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。</p><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><span id="more"></span><h2 id="什么是Lambda？"><a href="#什么是Lambda？" class="headerlink" title="什么是Lambda？"></a>什么是Lambda？</h2><p>对于Java变量，我们可以对其进行赋值，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> value = <span class="number">233</span>;</span><br></pre></td></tr></table></figure><p>如果想把<code>一块代码</code>赋值给一个变量，在Java8之前，这个是做不到的，但是在Java8之后，我们可以使用Lambda表达式来实现，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aBlockCode = (s) -&gt; System.out.println(s);</span><br></pre></td></tr></table></figure><p>上面，把“赋值给一个<code>变量</code>的<code>函数</code>”就是<code>Lambda表达式</code></p><p>但是这里仍然有一个问题，就是变量<code>aBlockCode</code>的类型应该是什么？</p><p>下面我们来介绍函数式接口</p><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>在Java8中，所有的Lambda的类型都是一个接口，而Lambda表达式本身，就是那段函数，就是这个接口的实现，举个例子：</p><p>首先定义一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyLambdaInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种有且仅有一个抽象方法，但是可以有多个非抽象方法的接口，我们称为函数式接口，可以使用<code>@FunctionalInterface</code>注解标注</p><p>我们给<code>aBlockCode</code>加上类型，我们就得到了一个完整的Lambda表达式声明，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyLambdaInterface aBlockCode = (s) -&gt; System.out.println(s);</span><br></pre></td></tr></table></figure><h2 id="Lambda表达式有什么用？"><a href="#Lambda表达式有什么用？" class="headerlink" title="Lambda表达式有什么用？"></a>Lambda表达式有什么用？</h2><p>使用 Lambda 表达式可以使代码变的更加简洁紧凑。</p><p>举个例子：</p><p>我们要实现对一个数组进行筛选</p><p>首先我们定义一个函数式接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(T t)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们先使用匿名内部类的方式实现这个需求，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; a = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    List&lt;Integer&gt; b = filter(a, <span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> integer&gt;<span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> c :</span><br><span class="line">            b)</span><br><span class="line">        System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再使用Lambda表达式的方式实现这个需求，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式写法</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; a = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    List&lt;Integer&gt; b = filter(a, x -&gt; x&gt;<span class="number">4</span>);</span><br><span class="line">    b.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，使用Lambda表达式改写匿名内部类的实现，使代码看起来更加简洁易懂</p><p>知道了什么是Lambda还有Lambda表达式的作用，下面我们来看看Lambda表达式的基础语法</p><h2 id="Lambda表达式基础语法"><a href="#Lambda表达式基础语法" class="headerlink" title="Lambda表达式基础语法"></a>Lambda表达式基础语法</h2><p>在Java8中，引入了一个新的操作符<code>-&gt;</code>，该操作符称为箭头操作符或者Lambda操作符</p><p>Lambda操作符把Lambda表达式拆分成了两部分</p><p>左侧：Lambda表达式的参数列表</p><p>右侧：Lambda表达式所需执行的功能，即Lambda体</p><ol><li><p>语法格式一：无参数，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() -&gt; System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>语法格式二：有一个参数，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(s) -&gt; System.out.println(s);</span><br><span class="line">s -&gt; System.out.println(s); <span class="comment">//若只有一个参数，小括号可省略</span></span><br></pre></td></tr></table></figure></li><li><p>语法格式三： 有多个参数(&gt;=2)，且Lambda体中有多条语句</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>语法格式四：有多个参数(&gt;=2)，Lambda体中只有一条语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);</span><br></pre></td></tr></table></figure></li></ol><h2 id="四大核心函数式接口"><a href="#四大核心函数式接口" class="headerlink" title="四大核心函数式接口"></a>四大核心函数式接口</h2><p>在实际开发过程中，使用Lambda表达式往往不需要自己编写函数式接口，Java已经内置了我们常用的函数式接口，使我们开发更加便捷，下面是最常用到的Java内置的函数式接口</p><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>方法</th></tr></thead><tbody><tr><td>Consumer 消费型接口</td><td>T</td><td>void</td><td>void accept(T t);</td></tr><tr><td>Supplier 供给型接口</td><td>void</td><td>T</td><td>T get();</td></tr><tr><td>Function&lt;T, R&gt; 函数型接口</td><td>T</td><td>R</td><td>R apply(T t);</td></tr><tr><td>Predicate 断言型接口</td><td>T</td><td>boolean</td><td>boolean test(T t);</td></tr></tbody></table><ol><li><p><code>Consumer&lt;T&gt;</code>消费型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ConsumerTest(<span class="number">100</span>, x-&gt; System.out.println(x*x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConsumerTest</span><span class="params">(Integer a, Consumer&lt;Integer&gt; consumer)</span></span>&#123;</span><br><span class="line">    consumer.accept(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Supplier&lt;T&gt;</code>供给型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; numList = SupplierTest(<span class="number">5</span>, ()-&gt; (<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>));</span><br><span class="line">    numList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">SupplierTest</span><span class="params">(Integer a, Supplier&lt;Integer&gt; supplier)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a ; i++) &#123;</span><br><span class="line">        Integer n = supplier.get();</span><br><span class="line">        list.add(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Function&lt;T,R&gt;</code>函数型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer a = FunctionTest(<span class="number">10</span>, x-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> x*<span class="number">200</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">FunctionTest</span><span class="params">(Integer a, Function&lt;Integer,Integer&gt; function)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> function.apply(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Predicate&lt;T&gt;</code>断言型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; a = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    List&lt;Integer&gt; res = PredicateTest(a,x-&gt;&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt; <span class="number">3</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">PredicateTest</span><span class="params">(List&lt;Integer&gt; a, Predicate&lt;Integer&gt; predicate)</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Integer b :</span><br><span class="line">            a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (predicate.test(b))&#123;</span><br><span class="line">            list.add(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lambda表达式是匿名内部类的语法糖，可以使代码更加简洁易懂，我们可以使用自定义的函数式接口或者Java内置的函数式接口来编写Lambda表达式，Lambda表达式还可以和Stream流，Optional<T>结合，使代码更加优雅。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Lambda表达式&quot;&gt;&lt;a href=&quot;#Lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;Lambda表达式&quot;&gt;&lt;/a&gt;Lambda表达式&lt;/h1&gt;&lt;p&gt;Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。&lt;/p&gt;
&lt;p&gt;Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。&lt;/p&gt;
&lt;p&gt;使用 Lambda 表达式可以使代码变的更加简洁紧凑。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Java8新特性" scheme="https://ego1st.cn/tags/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程2</title>
    <link href="https://ego1st.cn/JavaConcurrentProgramming2/"/>
    <id>https://ego1st.cn/JavaConcurrentProgramming2/</id>
    <published>2020-01-19T18:18:30.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>Java关于线程的相关知识，马士兵老师的高并发编程系列<a href="https://www.bilibili.com/video/av11076511">av11076511</a>，知识点2</p><span id="more"></span><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p><h2 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h2><h3 id="1-互斥条件"><a href="#1-互斥条件" class="headerlink" title="1.互斥条件"></a>1.互斥条件</h3><p>资源是独占的且排他使用。进程互斥使用资源，即任一时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源被另一个进程占有时，则申请等待，直到该资源被占用者释放</p><h3 id="2-不可剥夺条件"><a href="#2-不可剥夺条件" class="headerlink" title="2.不可剥夺条件"></a>2.不可剥夺条件</h3><p>进程所获得的资源在未使用完毕之前，不能被其他进程强行剥夺，而只能由获得该资源的进程自愿释放</p><h3 id="3-请求与保持条件"><a href="#3-请求与保持条件" class="headerlink" title="3.请求与保持条件"></a>3.请求与保持条件</h3><p>进程每次申请它所需要的一部分资源，在申请新资源的同时，继续占用已分配到的资源</p><h3 id="4-循环等待条件"><a href="#4-循环等待条件" class="headerlink" title="4.循环等待条件"></a>4.循环等待条件</h3><p>在发生死锁时，必然存在一个进程等待队列（P1,P2,P3….Pn），其中P1等待P2占有的资源，P2等待P1占有的资源，形成了一个进程等待环路。环路中每个进程已占有的资源同时被另一个进程所申请，即前一个进程占有后一个进程所申请的资源</p><h2 id="代码模拟死锁"><a href="#代码模拟死锁" class="headerlink" title="代码模拟死锁"></a>代码模拟死锁</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 线程1 先锁定对象a 3s后申请b</span></span><br><span class="line"><span class="comment">* 线程2 先锁定对象b 3s后申请a</span></span><br><span class="line"><span class="comment">* 进程无法继续推进 导致死锁问题</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    Object a = <span class="keyword">new</span> Object();</span><br><span class="line">    Object b = <span class="keyword">new</span> Object();</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;success2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        <span class="keyword">new</span> Thread(t::m1, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t::m2, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="同步方法和非同步方法是否可以同时调用？"><a href="#同步方法和非同步方法是否可以同时调用？" class="headerlink" title="同步方法和非同步方法是否可以同时调用？"></a>同步方法和非同步方法是否可以同时调用？</h1><p>同步方法m1和非同步方法m2，被两个线程分别调用</p><p>问：m2方法是否需要等待m1方法执行完之后再执行</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123; </span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m1 start...&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; m2 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"><span class="keyword">new</span> Thread(t::m1, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> Thread(t::m2, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><h3 id="结果如下："><a href="#结果如下：" class="headerlink" title="结果如下："></a>结果如下：</h3><p><img src="../images/JavaConcurrentProgramming2/image-20200319193843873.png" alt="image-20200319193843873"></p><p>说明：同步方法和非同步方法可以同时调用</p><p>原因：只有被<code>synchronized</code>关键字修饰的方法在执行时才需要获得锁，没被修饰则不需要，所以m2执行并不需要先获得锁再执行</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java关于线程的相关知识，马士兵老师的高并发编程系列&lt;a href=&quot;https://www.bilibili.com/video/av11076511&quot;&gt;av11076511&lt;/a&gt;，知识点2&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019。2020，</title>
    <link href="https://ego1st.cn/2019/"/>
    <id>https://ego1st.cn/2019/</id>
    <published>2020-01-01T09:01:25.000Z</published>
    <updated>2021-04-26T06:59:27.213Z</updated>
    
    <content type="html"><![CDATA[<div class="aplayer" id="aplayer-mai2019"></div><script>$(function () {    $.ajax({        url: 'https://api.i-meto.com/meting/api?server=netease&type=song&id=514774419',        success: function (list) {            var ap = new APlayer({                element: document.getElementById('aplayer-mai2019'),                showlrc: 3,                theme: '#8d7561',                music: list[0]            });            window.aplayers || (window.aplayers = []);            window.aplayers.push(ap);        }    })})</script><p>2019年结束了，在这里总结一下2019年我做了些什么，以及立下2020年的Flag :stuck_out_tongue_closed_eyes:</p><span id="more"></span><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><img src="https://cdn.ego1st.cn/postImg/githubcode.jpg"></p><p><img src="https://cdn.ego1st.cn/postImg/LeetCodeNum.jpg"></p><p><img src="https://cdn.ego1st.cn/postImg/XinMusic.jpg"></p><p>算是后半年开始发力吧，因为就业的压力比较大，迫于提高自己的代码水平。</p><p>每天主要提交的代码是LeetCode上刷的题（目前刷到28道了）,还有昕音乐项目以及博客的提交。</p><p>在新的一年里，定下以下几个小目标:stuck_out_tongue_winking_eye:</p><ol><li>继续坚持刷题，目标100道，不求多，但是要学到其中算法的思想</li><li>昕音乐项目发布上线，并坚持维护</li><li>博客坚持写，把踩到坑，学到的东西，还有有趣的事情都记录下来</li></ol><h1 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h1><p>2019年7月，参加了实习，在公司里视野开阔了许多，也学到了许多新东西。在这里感谢我的导师教会了我许多东西，让我得到了非常大的提高。</p><p>:desktop_computer:买了腾讯云的服务器，并借此机会学会了Linux的使用</p><p>:robot:Docker容器化服务的简单使用</p><p>:rocket:学会了Vue以及Electron</p><p>:drooling_face:机缘巧合，学会了编写油猴脚本（其实就是写JS）</p><p>:telescope:会使用Python的selenium库进行自动化测试，顺道学会了Node.js的Puppeteer，两个东西都是自动化操作浏览器</p><p>:grinning:大学里没学会的Java多线程在一次需求开发中也掌握了</p><p>:sunglasses:写业务代码的水平自认为也提高了许多，并向着写出优雅代码的目标不断努力</p><p>:thinking:不知道算不算技能，会用IOS的快捷指令工具写一些炫酷的指令</p><p>2020年，希望自己能够掌握更多的技能，技多不压身嘛:kissing_closed_eyes:</p><ol><li>Java基础更加牢固，会用一些新特性开发</li><li>MySQL要更加熟练</li><li>Linux的操作水平达到导师80%的程度:roll_eyes:</li><li>锻炼自己看源码的能力</li><li>是时候提高独立能力了:sob:</li></ol><h1 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h1><p>自从参加工作以来，好像吃胖了一点，毕竟一坐坐一天:relaxed:</p><p>上次连续加班后，突然心绞痛，去医院检查了心脏和肺，都没有问题，这让我意识到了，身体是革命的本钱，一定不能连续熬夜:dizzy_face:</p><p>希望自己在2020年，健健康康，身体倍儿棒，吃嘛嘛香，再长高5厘米:stuck_out_tongue_closed_eyes:</p><h1 id="看过的"><a href="#看过的" class="headerlink" title="看过的"></a>看过的</h1><p><img src="https://cdn.ego1st.cn/postImg/fanju.jpg"></p><p>据不完全统计，我今年看了53部番</p><p>印象深刻的有</p><p>《刀剑神域 Alicization》</p><p>《鬼灭之刃》</p><p>《进击的巨人第三季Part2》</p><p>《辉夜大小姐想让我告白》</p><p>《多罗罗》</p><p>《卡罗尔和星期二》</p><p>《约定的梦幻岛》</p><p>《比宇宙最遥远的地方》</p><p>《吹响吧！上低音号》</p><p>《紫罗兰的永恒花园》</p><p>《冰菓》</p><p>《弦音-风舞高中弓道部》</p><p>《盾之勇者》</p><p>《强风吹拂》</p><p>还有好多…..</p><p>还有一些电视剧</p><p>《切尔诺贝利》 《爱，死亡和机器人》《轮到你了》 </p><p>电影也看了好多</p><p>最推荐的就是《天气之子》，第一遍看完，又自己跑去二刷，感触颇多，总之吹爆！！！</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>2019年真的发生了许多事情，升到大四的我真是感觉压力比高三还大，值得高兴的是我找到了毕业后的工作，在上海，那里还有更多的机会还有挑战等着我。希望我能够继续保持，完成以上定下的小目标（Flag），成为一个能够独当一面的社会人:sweat_smile:~</p><p><img src="https://cdn.ego1st.cn/postImg/happynewyear2020.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;aplayer&quot; id=&quot;aplayer-mai2019&quot;&gt;&lt;/div&gt;
&lt;script&gt;
$(function () {
    $.ajax({
        url: &#39;https://api.i-meto.com/meting/api?server=netease&amp;type=song&amp;id=514774419&#39;,
        success: function (list) {
            var ap = new APlayer({
                element: document.getElementById(&#39;aplayer-mai2019&#39;),
                showlrc: 3,
                theme: &#39;#8d7561&#39;,
                music: list[0]
            });
            window.aplayers || (window.aplayers = []);
            window.aplayers.push(ap);
        }
    })
})
&lt;/script&gt;



&lt;p&gt;2019年结束了，在这里总结一下2019年我做了些什么，以及立下2020年的Flag :stuck_out_tongue_closed_eyes:&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue-Day5</title>
    <link href="https://ego1st.cn/VueDay5/"/>
    <id>https://ego1st.cn/VueDay5/</id>
    <published>2019-12-01T15:09:17.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>上个月，本来是后端程序员的我，被拉上当前端来用，第一次体验到前端的工作，还有人生中第一次加班（连着两周。。）咕咕咕好久的博客了，这次在这里总结一下噩梦18天我学到的东西，知识点可能比较杂碎~</p><p><img src="https://cdn.ego1st.cn/postImg/%E8%A1%A8%E6%83%851.jpg" alt="表情1"></p><span id="more"></span><h1 id="Vue-Router"><a href="#Vue-Router" class="headerlink" title="Vue-Router"></a>Vue-Router</h1><p>Vue Router是Vue的路由管理器，以下是简单的使用步骤：</p><ol><li><p>首先要把组件映射到路由上（components—&gt;routers）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Users <span class="keyword">from</span> <span class="string">&#x27;./components/Users&#x27;</span></span><br><span class="line"><span class="keyword">import</span> MyMusic <span class="keyword">from</span> <span class="string">&#x27;./components/MyMusic&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  base: process.env.BASE_URL,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        component:Users</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">        component:Home</span><br><span class="line">        children:[</span><br><span class="line">        &#123;</span><br><span class="line">        path:<span class="string">&#x27;/mymusic&#x27;</span>,</span><br><span class="line">        component:MyMusic</span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">        redirect:<span class="string">&#x27;/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>*全匹配，即路由表中没有的，则自动跳转到“/”路径下；还可以设置<code>children</code>配置子路由，即在<code>/home</code>下跳转到<code>/chat</code>最终路由为<code>/home/chat</code></p></li><li><p>然后告诉Vue Router在哪里渲染这些组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;main&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;router-view&gt;</code>标签就是渲染路由对应组件的地方</p></li></ol><p>Vue Router还可以进行动态路由匹配，举个栗子就是：我们有一个 <code>User</code> 组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 <code>vue-router</code> 的路由路径中使用“动态路径参数”(dynamic segment) 来达到这个效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;User&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 动态路径参数 以冒号开头</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: User &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时，<code>user/1</code>和<code>user/2</code>都将跳转到<code>/user</code>路由下，然后参数会被设置到<code>this.$route.params</code>中，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> User = &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;User &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。&lt;—这是官方的解释，我的理解就是Vuex与Java中的全局变量类似。以下是Vuex的简单用法：</p><p>在<code>main.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在组件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;about&quot;&gt;</span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;button @click&#x3D;&quot;increment&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">      count()&#123;</span><br><span class="line">        return this.$store.state.count</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment()&#123;</span><br><span class="line">      this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>在Vuex的<code>store.js</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.state.count++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后在所有组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.state.count</span><br></pre></td></tr></table></figure><p>即可取到<code>count</code>的值，并可使用<code>store.js</code>（Vuex的<code>mutations</code>）属性，来改变<code>count</code>的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">increment</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在做的项目中，仅仅简单的使用了Vuex来管理用户的基本信息，Vuex复杂的使用方式以后会专门写一篇博客来介绍（立个flag）</p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中，类似于Jquery中的<code>$.ajax</code>。</p><p>在项目中主要用到了全局拦截和封装<code>axios</code></p><p>首先来讲全局拦截器：</p><ol><li><p>定义一个全局请求拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http request 拦截器</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">//TODO</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//TODO</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>定义一个全局响应拦截器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http response 拦截器</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//TODO</span></span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//TODO</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p>然后是简单的<code>axios</code>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> base = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uploadFileRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">    data: params,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> putRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">&#x27;&amp;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;base&#125;</span><span class="subst">$&#123;url&#125;</span>`</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="杂碎的知识点"><a href="#杂碎的知识点" class="headerlink" title="杂碎的知识点"></a>杂碎的知识点</h1><ol><li><p>使用<code>setInterval()</code>方法时一定要记得销毁，利用<code>clearInterval()</code></p></li><li><p>过滤器的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//姓名脱敏</span></span><br><span class="line">filters:&#123;</span><br><span class="line">    name:<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(value.length==<span class="number">2</span>) <span class="keyword">return</span> value.substring(<span class="number">0</span>,<span class="number">1</span>)+<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(value.length==<span class="number">3</span>) <span class="keyword">return</span> value.substring(<span class="number">0</span>,<span class="number">1</span>)+<span class="string">&#x27;**&#x27;</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>vue中<code>&lt;style&gt;</code>标签的<code>scope</code>属性和深度选择器<code>/deep/</code>的使用，应用场景：你自定义一个css样式，但是又不想影响全局，这时你可以给<code>&lt;style&gt;</code>标签设置<code>scope</code>属性，这样css样式只在此组件中有效，但是有些样式又想作用在子组件中，此时可以在该样式之前加上<code>/deep</code>或者<code>::v-deep</code>，该样式就可以穿透到子组件中了。这样做不仅可以减少标签id或者class的定义还可以避免css样式污染。</p></li></ol><p>先写这么多，以后遇到新的知识点还会补充~~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上个月，本来是后端程序员的我，被拉上当前端来用，第一次体验到前端的工作，还有人生中第一次加班（连着两周。。）咕咕咕好久的博客了，这次在这里总结一下噩梦18天我学到的东西，知识点可能比较杂碎~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.ego1st.cn/postImg/%E8%A1%A8%E6%83%851.jpg&quot; alt=&quot;表情1&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue笔记" scheme="https://ego1st.cn/categories/Vue%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>volatile关键字</title>
    <link href="https://ego1st.cn/volatile/"/>
    <id>https://ego1st.cn/volatile/</id>
    <published>2019-10-10T08:25:52.000Z</published>
    <updated>2021-04-26T06:59:27.253Z</updated>
    
    <content type="html"><![CDATA[<p><code>volatile</code>是Java提供的一种轻量级的同步机制。Java 语言包含两种内在的同步机制：同步块（或方法）和 <code>volatile</code> 变量，相比于<code>synchronized</code>（<code>synchronized</code>通常称为重量级锁），<code>volatile</code>更轻量级，因为它不会引起线程上下文的切换和调度。但是<code>volatile</code> 变量的同步性较差（有时它更简单并且开销更低），而且其使用也更容易出错。</p><span id="more"></span><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>被<code>volatile</code>关键字修饰的共享变量具有以下特性</p><ol><li>保证了不同线程对该变量操作时的内存可见性</li><li>禁止了指令重排序</li></ol><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>A，B线程都用到了一个变量，Java默认是A运行时保存一份copy到该线程的缓存中，此时如果B线程修改了该变量，则线程A未必知道，因为A线程用的是自己缓存中的该变量的拷贝</p><p>使用<code>volatile</code>关键字修饰，会让所有线程读到该变量的修改值，强制线程读取堆内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="comment">//对比一下有无volatile的情况下，整个程序运行结果的区别</span></span><br><span class="line">    <span class="comment">/*volatile*/</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(running) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">TimeUnit.MILLISECONDS.sleep(10);</span></span><br><span class="line"><span class="comment">&#125; catch (InterruptedException e) &#123; </span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;m end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.running = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码可以发现，当running变量没有被<code>volatile</code>关键字修饰时，线程t1一直运行；当running变量被<code>volatile</code>关键字修饰时，主线程改变running值，t1线程会读取到改变进而输出“m end”结束线程</p><p>以上的说法方便理解</p><p>其实真实的情况是，没有被<code>volatile</code>关键字修饰的变量，t1线程使用时会拷贝一份到该线程的缓存中，但是，当CPU空闲时，仍然会去堆内存中读取running值，从而导致t1线程停止。</p><h2 id="volatile关键字注意点"><a href="#volatile关键字注意点" class="headerlink" title="volatile关键字注意点"></a>volatile关键字注意点</h2><ol><li><p><code>volatile</code>关键字并不能保证多个线程共同修改同一个变量所带来的不一致问题，也就是说<code>volatile</code>不能替代<code>synchronized</code>关键字解决同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line">List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;thread-&quot;</span>+i));</span><br><span class="line">&#125;</span><br><span class="line">threads.forEach((o)-&gt;o.start());</span><br><span class="line">threads.forEach((o)-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">o.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(t.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55600</span></span><br></pre></td></tr></table></figure><p>这说明<code>volatile</code>关键字并不能解决同步问题，因为每个线程可能从内存中读取到的值一样，并在此基础上相加，所以输出的值远远小于10000</p></li><li><p><code>synchronized</code>关键字保证可见性和原子性，<code>volatile</code>关键字只能保证可见性</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt;是Java提供的一种轻量级的同步机制。Java 语言包含两种内在的同步机制：同步块（或方法）和 &lt;code&gt;volatile&lt;/code&gt; 变量，相比于&lt;code&gt;synchronized&lt;/code&gt;（&lt;code&gt;synchronized&lt;/code&gt;通常称为重量级锁），&lt;code&gt;volatile&lt;/code&gt;更轻量级，因为它不会引起线程上下文的切换和调度。但是&lt;code&gt;volatile&lt;/code&gt; 变量的同步性较差（有时它更简单并且开销更低），而且其使用也更容易出错。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>volatile关键字</title>
    <link href="https://ego1st.cn/Untitled/"/>
    <id>https://ego1st.cn/Untitled/</id>
    <published>2019-10-10T08:25:52.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p><code>volatile</code>是Java提供的一种轻量级的同步机制。Java 语言包含两种内在的同步机制：同步块（或方法）和 <code>volatile</code> 变量，相比于<code>synchronized</code>（<code>synchronized</code>通常称为重量级锁），<code>volatile</code>更轻量级，因为它不会引起线程上下文的切换和调度。但是<code>volatile</code> 变量的同步性较差（有时它更简单并且开销更低），而且其使用也更容易出错。</p><span id="more"></span><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>被<code>volatile</code>关键字修饰的共享变量具有以下特性</p><ol><li>保证了不同线程对该变量操作时的内存可见性</li><li>禁止了指令重排序</li></ol><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>A，B线程都用到了一个变量，Java默认是A运行时保存一份copy到该线程的缓存中，此时如果B线程修改了该变量，则线程A未必知道，因为A线程用的是自己缓存中的该变量的拷贝</p><p>使用<code>volatile</code>关键字修饰，会让所有线程读到该变量的修改值，强制线程读取堆内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="comment">//对比一下有无volatile的情况下，整个程序运行结果的区别</span></span><br><span class="line">    <span class="comment">/*volatile*/</span> <span class="keyword">boolean</span> running = <span class="keyword">true</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;m start&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(running) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">TimeUnit.MILLISECONDS.sleep(10);</span></span><br><span class="line"><span class="comment">&#125; catch (InterruptedException e) &#123; </span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;m end!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t.running = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以上代码可以发现，当running变量没有被<code>volatile</code>关键字修饰时，线程t1一直运行；当running变量被<code>volatile</code>关键字修饰时，主线程改变running值，t1线程会读取到改变进而输出“m end”结束线程</p><p>以上的说法方便理解</p><p>其实真实的情况是，没有被<code>volatile</code>关键字修饰的变量，t1线程使用时会拷贝一份到该线程的缓存中，但是，当CPU空闲时，仍然会去堆内存中读取running值，从而导致t1线程停止。</p><h2 id="volatile关键字注意点"><a href="#volatile关键字注意点" class="headerlink" title="volatile关键字注意点"></a>volatile关键字注意点</h2><ol><li><p><code>volatile</code>关键字并不能保证多个线程共同修改同一个变量所带来的不一致问题，也就是说<code>volatile</code>不能替代<code>synchronized</code>关键字解决同步问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line">List&lt;Thread&gt; threads = <span class="keyword">new</span> ArrayList&lt;Thread&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">threads.add(<span class="keyword">new</span> Thread(t::m, <span class="string">&quot;thread-&quot;</span>+i));</span><br><span class="line">&#125;</span><br><span class="line">threads.forEach((o)-&gt;o.start());</span><br><span class="line">threads.forEach((o)-&gt;&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">o.join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(t.count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">55600</span></span><br></pre></td></tr></table></figure><p>这说明<code>volatile</code>关键字并不能解决同步问题，因为每个线程可能从内存中读取到的值一样，并在此基础上相加，所以输出的值远远小于10000</p></li><li><p><code>synchronized</code>关键字保证可见性和原子性，<code>volatile</code>关键字只能保证可见性</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;volatile&lt;/code&gt;是Java提供的一种轻量级的同步机制。Java 语言包含两种内在的同步机制：同步块（或方法）和 &lt;code&gt;volatile&lt;/code&gt; 变量，相比于&lt;code&gt;synchronized&lt;/code&gt;（&lt;code&gt;synchronized&lt;/code&gt;通常称为重量级锁），&lt;code&gt;volatile&lt;/code&gt;更轻量级，因为它不会引起线程上下文的切换和调度。但是&lt;code&gt;volatile&lt;/code&gt; 变量的同步性较差（有时它更简单并且开销更低），而且其使用也更容易出错。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>synchronized关键字</title>
    <link href="https://ego1st.cn/concurrent/"/>
    <id>https://ego1st.cn/concurrent/</id>
    <published>2019-10-08T10:18:47.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="synchronized关键字的意义"><a href="#synchronized关键字的意义" class="headerlink" title="synchronized关键字的意义"></a><code>synchronized</code>关键字的意义</h2><p>为了防止代码块受并发访问的干扰，Java语言提供一个 synchronized关键字达 到这一目的，并且 Java SE 5.0引入了 ReentrantLock 类。synchronized 关键字自动提供一个 锁以及相关的“ 条件”， 对于大多数需要显式锁的情况， 这是很便利的。</p><span id="more"></span><h2 id="synchronized关键字的作用"><a href="#synchronized关键字的作用" class="headerlink" title="synchronized关键字的作用"></a><code>synchronized</code>关键字的作用</h2><p>synchronized关键字是对某个对象加锁</p><p>举个例子，如以下代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object o = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(o) &#123; <span class="comment">//任何线程要执行下面的代码，必须先拿到o的锁</span></span><br><span class="line">count--;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有另一种用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">//任何线程要执行下面的代码，必须先拿到this的锁      </span></span><br><span class="line">        count--;      </span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式等同于如下代码段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123; <span class="comment">//等同于在方法的代码执行时要synchronized(this)   </span></span><br><span class="line">    count--;   </span><br><span class="line">    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; count = &quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：当<code>synchronized</code>关键字修饰方法时，锁定的是this，也就是该对象本身；当<code>synchronized</code>关键字修饰的是静态方法或者静态变量时，锁定的是<code>对象.class</code></p><h2 id="synchronized关键字的注意点"><a href="#synchronized关键字的注意点" class="headerlink" title="synchronized关键字的注意点"></a><code>synchronized</code>关键字的注意点</h2><ol><li><p>同步方法和非同步方法可以同时调用，原因是调用非同步方法时不需要拿到锁</p></li><li><p>在应用场景中，对写方法（set）加锁，对读方法（get）不加锁，容易产生脏读问题，原因是，在①线程写入操作还没有完成时，此时②线程读取数据，此时读到的数据不是实际写入的数据</p></li><li><p>一个同步方法可以调用另一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候，仍然会得到该对象的锁，也就是说<code>synchronized</code>获得的锁是可重入的</p></li><li><p>可重入锁的实现机制是：每一个锁关联一个线程持有者和计数器，当计数器为 0 时表示该锁没有被任何线程持有，那么任何线程都可能获得该锁而调用相应的方法；当某一线程请求成功后，JVM会记下锁的持有线程，并且将计数器置为 1；此时其它线程请求该锁，则必须等待；而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增；当线程退出同步代码块时，计数器会递减，如果计数器为 0，则释放该锁。</p></li><li><p>子类可以调用父类的同步方法，锁住的是子类对象</p></li><li><p>在同步方法执行的过程中，如果出现异常，默认情况下锁会被释放，若不想被释放，则需要<code>catch</code>异常</p></li><li><p>同步代码块中的语句越少越好，采用细粒度的锁，可以使线程争用的时间变短，从而提高效率</p></li><li><p>锁定的某个对象o，如果o的属性发生改变，不影响锁的使用，但是如果o变成另一个对象，则锁定的对象发生改变，如以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">Object o = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(o) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">new</span> T();</span><br><span class="line"><span class="comment">//启动第一个线程</span></span><br><span class="line"><span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建第二个线程</span></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(t::m, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line"><span class="comment">//锁对象发生改变，所以t2线程得以执行，如果注释掉这句话，线程2将永远得不到执行机会</span></span><br><span class="line">        t.o = <span class="keyword">new</span> Object(); </span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">t1</span><br><span class="line">t1</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t1</span><br><span class="line">t2</span><br><span class="line">t1</span><br><span class="line"></span><br><span class="line">Process finished with exit code -<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>不要用字符串常量作为锁定对象，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line">String s1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String s2 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s1) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(s2) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>m1和m2其实锁定的是同一个对象；此时有可能发生诡异的现象，比如你用到的一个类库，在该类库中代码中也锁定了字符串“Hello”，这时就有可能发生死锁阻塞，因为你的程序和你用到的类库在不经意间使用了同一把锁</p></li></ol><h2 id="synchronized的原理"><a href="#synchronized的原理" class="headerlink" title="synchronized的原理"></a><code>synchronized</code>的原理</h2><h3 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a>同步代码块</h3><p><img src="https://cdn.ego1st.cn/postImg/synchronized1.png"></p><p><strong>monitorenter ：</strong></p><p>每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p><p>1、如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。</p><p>2、如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.</p><p>3.如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</p><p><strong>monitorexit：</strong></p><p>　　执行monitorexit的线程必须是objectref所对应的monitor的所有者。</p><p>​        指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p><p>　　Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。</p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p><img src="https://cdn.ego1st.cn/postImg/synchronized2.png"></p><p>从反编译的结果来看，方法的同步并没有通过指令monitorenter和monitorexit来完成（理论上其实也可以通过这两条指令来实现），不过相对于普通方法，其常量池中多了ACC_SYNCHRONIZED标示符。JVM就是根据该标示符来实现方法的同步的：当方法调用时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置，如果设置了，执行线程将先获取monitor，获取成功之后才能执行方法体，方法执行完后再释放monitor。在方法执行期间，其他任何线程都无法再获得同一个monitor对象。 其实本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。</p><p>参考资料：</p><p><a href="https://www.cnblogs.com/huangyin/p/6586469.html">https://www.cnblogs.com/huangyin/p/6586469.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;synchronized关键字的意义&quot;&gt;&lt;a href=&quot;#synchronized关键字的意义&quot; class=&quot;headerlink&quot; title=&quot;synchronized关键字的意义&quot;&gt;&lt;/a&gt;&lt;code&gt;synchronized&lt;/code&gt;关键字的意义&lt;/h2&gt;&lt;p&gt;为了防止代码块受并发访问的干扰，Java语言提供一个 synchronized关键字达 到这一目的，并且 Java SE 5.0引入了 ReentrantLock 类。synchronized 关键字自动提供一个 锁以及相关的“ 条件”， 对于大多数需要显式锁的情况， 这是很便利的。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Java并发编程1</title>
    <link href="https://ego1st.cn/JavaConcurrentProgramming/"/>
    <id>https://ego1st.cn/JavaConcurrentProgramming/</id>
    <published>2019-09-30T14:29:55.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看Java关于线程的相关知识，看的是马士兵老师的高并发编程系列<a href="https://www.bilibili.com/video/av11076511">av11076511</a>，遂把知识点整理下来，便于以后查阅。</p><span id="more"></span><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><h3 id="通过继承Thread类并重写run-方法"><a href="#通过继承Thread类并重写run-方法" class="headerlink" title="通过继承Thread类并重写run()方法"></a>通过继承<code>Thread</code>类并重写<code>run()</code>方法</h3><p>通过继承<code>Thread</code>类并重写<code>run()</code>方法，<code>run()</code>方法中定义需要线程执行的任务，然后调用实现类的<code>start()</code>方法启动这个线程（ps：单纯的调用<code>run()</code>方法只是单纯的方法使用，并不能达到启动线程的目的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Current</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程启动,ID为:&quot;</span> + Thread.currentThread().getId() +</span><br><span class="line">                <span class="string">&quot;,名字为&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">            <span class="comment">// 创建一个线程并开启线程</span></span><br><span class="line">            Current a = <span class="keyword">new</span> Current();</span><br><span class="line">            a.start();</span><br><span class="line">            <span class="comment">// 多创建几个线程</span></span><br><span class="line">            <span class="keyword">new</span> Current().start();</span><br><span class="line">            <span class="keyword">new</span> Current().start();</span><br><span class="line">            <span class="keyword">new</span> Current().start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子线程启动,ID为:<span class="number">14</span>,名字为Thread-<span class="number">2</span></span><br><span class="line">子线程启动,ID为:<span class="number">12</span>,名字为Thread-<span class="number">0</span></span><br><span class="line">子线程启动,ID为:<span class="number">13</span>,名字为Thread-<span class="number">1</span></span><br><span class="line">子线程启动,ID为:<span class="number">15</span>,名字为Thread-<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="通过继承Runnable接口，并实现run-方法"><a href="#通过继承Runnable接口，并实现run-方法" class="headerlink" title="通过继承Runnable接口，并实现run()方法"></a>通过继承<code>Runnable</code>接口，并实现<code>run()</code>方法</h3><p>通过继承<code>Runnable</code>接口，实现<code>run()</code>方法，然后调用实现类的<code>start（）</code>方法启动这个线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程启动,ID为:&quot;</span> + Thread.currentThread().getId() +</span><br><span class="line">                <span class="string">&quot;,名字为&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个线程并开启线程</span></span><br><span class="line">        Current a = <span class="keyword">new</span> Current();</span><br><span class="line">        a.start();</span><br><span class="line">        <span class="comment">// 多创建几个线程</span></span><br><span class="line">        <span class="keyword">new</span> Current().start();</span><br><span class="line">        <span class="keyword">new</span> Current().start();</span><br><span class="line">        <span class="keyword">new</span> Current().start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">子线程启动,ID为:<span class="number">13</span>,名字为Thread-<span class="number">1</span></span><br><span class="line">子线程启动,ID为:<span class="number">15</span>,名字为Thread-<span class="number">3</span></span><br><span class="line">子线程启动,ID为:<span class="number">12</span>,名字为Thread-<span class="number">0</span></span><br><span class="line">子线程启动,ID为:<span class="number">14</span>,名字为Thread-<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="线程的五种状态"><a href="#线程的五种状态" class="headerlink" title="线程的五种状态"></a>线程的五种状态</h1><p>线程有五个状态</p><ol><li>新生（<code>new</code>）：用<code>new</code>关键字新建了一个线程对象后，该线程对象处于新生态，此时已经有了自己的内存空间</li><li>就绪（<code>runnable</code>）：调用了<code>start（）</code>方法后，线程从新生态转化为就绪态，此时线程还没有运行，在等待CPU调度</li><li>运行（<code>running</code>）：处于运行状态的线程正在执行自己的<code>run()</code>方法</li><li>阻塞<code>(blocked)</code>：线程暂停执行，让出CPU时间片，并将其交给其他线程使用</li><li>死亡<code>dead</code>：当前线程完成工作或者抛出异常时，线程死亡</li></ol><p><img src="https://cdn.ego1st.cn/postImg/xiancheng.png" alt="线程的状态"></p><p>以上简单的介绍了一下线程的基础，下面是关于线程的同步问题</p><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><p>在大多数实际的多线程应用中， 两个或两个以上的线程需要共享对同一数据的存取。如果两个线程存取相同的对象， 并且每一个线程都调用了一个修改该对象状态的方法，将会发 生什么呢？ 可以想象，线程彼此踩了对方的脚。根据各线程访问数据的次序，可能会产生i化 误的对象。这样一个情况通常称为竞争条件（race condition)。为了避免多线程引起的对共享数据的说误，必须学习如何同步存取。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在看Java关于线程的相关知识，看的是马士兵老师的高并发编程系列&lt;a href=&quot;https://www.bilibili.com/video/av11076511&quot;&gt;av11076511&lt;/a&gt;，遂把知识点整理下来，便于以后查阅。&lt;/p&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>SSH</title>
    <link href="https://ego1st.cn/SSH/"/>
    <id>https://ego1st.cn/SSH/</id>
    <published>2019-09-27T15:54:12.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最后一次！！！！！！！"><a href="#最后一次！！！！！！！" class="headerlink" title="最后一次！！！！！！！"></a>最后一次！！！！！！！</h1><p>测试TravisCI通过SSH登陆服务器，完成部署博客的任务</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最后一次！！！！！！！&quot;&gt;&lt;a href=&quot;#最后一次！！！！！！！&quot; class=&quot;headerlink&quot; title=&quot;最后一次！！！！！！！&quot;&gt;&lt;/a&gt;最后一次！！！！！！！&lt;/h1&gt;&lt;p&gt;测试TravisCI通过SSH登陆服务器，完成部署博客的任务&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode4--FindMedianSortedArrays</title>
    <link href="https://ego1st.cn/LeetCode4-FindMedianSortedArrays/"/>
    <id>https://ego1st.cn/LeetCode4-FindMedianSortedArrays/</id>
    <published>2019-09-14T12:45:11.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。</p><p>请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p><p>你可以假设 nums1 和 nums2 不会同时为空。</p><p>示例 1:</p><p>nums1 = [1, 3]<br>nums2 = [2]</p><p>则中位数是 2.0<br>示例 2:</p><p>nums1 = [1, 2]<br>nums2 = [3, 4]</p><p>则中位数是 (2 + 3)/2 = 2.5</p><span id="more"></span><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="第一种（暴力解法）"><a href="#第一种（暴力解法）" class="headerlink" title="第一种（暴力解法）"></a>第一种（暴力解法）</h2><p>两个有序数组，我想到了归并排序中的第二步。合并两个有序数组，然后求出中位数</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span>?(nums2[n / <span class="number">2</span> - <span class="number">1</span>] + nums2[n / <span class="number">2</span>]) / <span class="number">2.0</span> : nums2[n / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> m % <span class="number">2</span> == <span class="number">0</span>?(nums1[m / <span class="number">2</span> - <span class="number">1</span>] + nums1[m / <span class="number">2</span>]) / <span class="number">2.0</span> : nums1[m / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count != (m + n)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">                <span class="comment">//--------------------------------------------------------</span></span><br><span class="line">                <span class="comment">//当有一个数组遍历完之后，另一个数组直接灌入新的数组 跳过判断</span></span><br><span class="line">                <span class="keyword">while</span> (j != n) &#123;</span><br><span class="line">                    nums[count++] = nums2[j++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i != m) &#123;</span><br><span class="line">                    nums[count++] = nums1[i++];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//---------------------------------------------------------</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//-------------------------------------------------------------</span></span><br><span class="line">            <span class="comment">//比大小，小的数填入新的数组，下标右移</span></span><br><span class="line">            <span class="keyword">if</span> (nums1[i] &lt; nums2[j]) &#123;</span><br><span class="line">                nums[count++] = nums1[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                nums[count++] = nums2[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">        <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (nums[count / <span class="number">2</span> - <span class="number">1</span>] + nums[count / <span class="number">2</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[count / <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<code>O（m+n）</code></p><h2 id="第二种（寻找第n小的数）"><a href="#第二种（寻找第n小的数）" class="headerlink" title="第二种（寻找第n小的数）"></a>第二种（寻找第n小的数）</h2><p>中位数的定义：是按顺序排列的一组数据中居于中间位置的数。</p><p>所以我们只需要寻找一个有序数组中第n/2位置的数就可以了。（n为两个数组的长度之和）</p><p>寻找第n/2小的数，找的思路如下图所示</p><p><img src="https://cdn.ego1st.cn/postImg/findSmall.gif"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortArrays</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span>[] nums2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = nums1.length;</span><br><span class="line">        <span class="keyword">int</span> n = nums2.length;</span><br><span class="line">        <span class="keyword">int</span> left = (m+n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> right = (m+n+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//当数组的长度为奇数时，求出两个相同的数除以2为中位数，偶数则是left，right位置的数相加除以2</span></span><br><span class="line">        <span class="keyword">return</span> (getKth(nums1,<span class="number">0</span>,m-<span class="number">1</span>,nums2,<span class="number">0</span>,n-<span class="number">1</span>,left)+getKth(nums1,<span class="number">0</span>,m-<span class="number">1</span>,nums2,<span class="number">0</span>,n-<span class="number">1</span>,right))*<span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//递归调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getKth</span><span class="params">(<span class="keyword">int</span>[] nums1, <span class="keyword">int</span> start1, <span class="keyword">int</span> end1, <span class="keyword">int</span>[] nums2, <span class="keyword">int</span> start2, <span class="keyword">int</span> end2, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> len2 = end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让len1永远比len2小，遇到大小相同的数时，留上面的，排除下面的</span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="comment">//一个数组被排除到空，返回另一个数组的当前第K值</span></span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//如果k=1 返回两个数组中 第一个数字小的那个数，就是我们要找的第K小的数</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)<span class="keyword">return</span> Math.min(nums1[start1],nums2[start2]);</span><br><span class="line">        <span class="comment">//如果k/2 比 当前数组长度长，则直接取 数组长度</span></span><br><span class="line">        <span class="keyword">int</span> i = start1 + Math.min(len1, k/<span class="number">2</span>)-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = start2 + Math.min(len2, k/<span class="number">2</span>)-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排除小的数</span></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j])&#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<code>O(log(m+n）</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。&lt;/p&gt;
&lt;p&gt;请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。&lt;/p&gt;
&lt;p&gt;你可以假设 nums1 和 nums2 不会同时为空。&lt;/p&gt;
&lt;p&gt;示例 1:&lt;/p&gt;
&lt;p&gt;nums1 = [1, 3]&lt;br&gt;nums2 = [2]&lt;/p&gt;
&lt;p&gt;则中位数是 2.0&lt;br&gt;示例 2:&lt;/p&gt;
&lt;p&gt;nums1 = [1, 2]&lt;br&gt;nums2 = [3, 4]&lt;/p&gt;
&lt;p&gt;则中位数是 (2 + 3)/2 = 2.5&lt;/p&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://ego1st.cn/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://ego1st.cn/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Day4</title>
    <link href="https://ego1st.cn/VueDay4/"/>
    <id>https://ego1st.cn/VueDay4/</id>
    <published>2019-09-04T07:53:17.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。（摘自<a href="https://cn.vuejs.org/%EF%BC%89">https://cn.vuejs.org/）</a></p><span id="more"></span><h2 id="实例的生命周期图"><a href="#实例的生命周期图" class="headerlink" title="实例的生命周期图"></a>实例的生命周期图</h2><p><img src="https://cdn.ego1st.cn/postImg/vuelife.png"></p><h2 id="生命周期钩子在new-Vue内以属性的方式进行声明"><a href="#生命周期钩子在new-Vue内以属性的方式进行声明" class="headerlink" title="生命周期钩子在new Vue内以属性的方式进行声明"></a>生命周期钩子在<code>new Vue</code>内以<strong>属性</strong>的方式进行声明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  created: function () &#123;</span><br><span class="line">    // `this` 指向 vm 实例</span><br><span class="line">    console.log(&#x27;a is: &#x27; + this.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>注：在生命周期函数中不能使用箭头函数（=&gt;）</p><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><ol><li><code>beforeCreate</code>在实例初始化之后，数据观测（<code>data observer</code>）和 <code>event/watcher事件</code>配置之前被调用,简单来是，就是页面加载之前被调用，一般可以在这里加载动画</li><li><code>created</code>在实例创建之后被调用，这一步已经完成了数据观测（<code>data observer</code>），属性和方法的运算，<code>watch/event</code>事件回调，但是<strong>挂载</strong>还没有开始，<code>$el</code>属性目前不可见。一般可以在这里获取数据</li></ol><hr><ol start="3"><li><p>接下来<code>Vue</code>会判断是否有<code>el</code>属性，</p><ul><li><p>如果有，则检查有没有<code>template</code></p></li><li><p>如果没有，则检查有没有<code>.$mount</code>，如果没有，则整个生命周期结束</p></li></ul></li><li><p>有<code>template</code>，则执行<code>template</code>中具体的组件，<code>render</code>方法渲染页面，或者具体标签</p></li><li><p>没有<code>template</code>和<code>.$mount</code>，则生命周期结束</p></li></ol><hr><ol start="6"><li><code>beforeMount</code>在挂载之前被调用，相关的渲染函数首次被调用，虚拟Dom已经配置，但是页面仍未显示</li><li><code>mounted</code>组件挂在后，<code>el</code>被新创建的<code>vm.$el</code>替换，挂载成功，此方法执行后，页面显示</li><li><code>beforeUpdate</code>组件更新前，页面仍未更新，但虚拟Dom已经配置</li><li><code>updated</code>组件更新，此方法执行后，页面显示</li><li><code>beforeDestroy</code>组件销毁前</li><li><code>destoryed</code>组件销毁</li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue生命周期&quot;&gt;&lt;a href=&quot;#Vue生命周期&quot; class=&quot;headerlink&quot; title=&quot;Vue生命周期&quot;&gt;&lt;/a&gt;Vue生命周期&lt;/h1&gt;&lt;p&gt;每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做&lt;strong&gt;生命周期钩子&lt;/strong&gt;的函数，这给了用户在不同阶段添加自己的代码的机会。（摘自&lt;a href=&quot;https://cn.vuejs.org/%EF%BC%89&quot;&gt;https://cn.vuejs.org/）&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vue笔记" scheme="https://ego1st.cn/categories/Vue%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue-Day3</title>
    <link href="https://ego1st.cn/VueDay3/"/>
    <id>https://ego1st.cn/VueDay3/</id>
    <published>2019-09-02T07:38:12.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue笔记-Day3"><a href="#Vue笔记-Day3" class="headerlink" title="Vue笔记 Day3"></a>Vue笔记 Day3</h1><h2 id="Vue中使用样式-css"><a href="#Vue中使用样式-css" class="headerlink" title="Vue中使用样式-css"></a>Vue中使用样式-css</h2><p>假设<code>&lt;style&gt;</code>标签中有样式，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .red&#123;</span><br><span class="line"><span class="css">            <span class="attribute">color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .thin&#123;</span><br><span class="line"><span class="css">            <span class="attribute">font-weight</span>: <span class="number">200</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .italic&#123;</span><br><span class="line"><span class="css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .active&#123;</span><br><span class="line"><span class="css">            <span class="attribute">letter-spacing</span>: <span class="number">0.5em</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p><strong>直接传递一个数组， 注意：这里的class需要使用 v-blind做数组绑定</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;]&quot;</span>&gt;</span>it&#x27;s a Huge H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>还可以在数组中使用三元表达式，如</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;, flag?&#x27;active&#x27;:&#x27;&#x27;]&quot;</span>&gt;</span>it&#x27;s a Huge h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--flag为data中定义的数据--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在数组中可以用对象替换三元表达式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;thin&#x27;, &#x27;italic&#x27;, &#123;&#x27;active&#x27;:flag &#125;]&quot;</span>&gt;</span>it&#x27;s a Huge h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>直接使用对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--v-bind绑定class的时候，对象的属性是类名，由于对象的属性可带引号，也可以不带引号,属性的值是一个标识符--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red:true, thin:true, italic:false, active:false&#125;&quot;</span>&gt;</span>it&#x27;s a Huge h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p><strong>在<code>style</code>中书写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color:&#x27;red&#x27;, &#x27;font-weight&#x27;: 200 &#125;&quot;</span>&gt;</span>This is a h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>定义在<code>data</code>中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj1&quot;</span>&gt;</span>This is a h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>用数组的形式，将<code>style</code>放入其中</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj1, styleObj2]&quot;</span>&gt;</span>This is a h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(</span><br><span class="line">  &#123;</span><br><span class="line">   el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   data:&#123;</span><br><span class="line">   styleObj1:&#123;</span><br><span class="line">   color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;font-weight&#x27;</span>: <span class="number">200</span></span><br><span class="line">   &#125;,</span><br><span class="line">     styleObj2:&#123;</span><br><span class="line">     <span class="string">&#x27;font-style&#x27;</span>: <span class="string">&#x27;italic&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="v-for循环"><a href="#v-for循环" class="headerlink" title="v-for循环"></a>v-for循环</h2><p>假设有数组，对象数组，对象如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    list1:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line"></span><br><span class="line">     list2:[</span><br><span class="line">           &#123;<span class="attr">id</span>:<span class="number">1</span>, <span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">2</span>, <span class="attr">name</span>:<span class="string">&#x27;b&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">3</span>, <span class="attr">name</span>:<span class="string">&#x27;c&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="number">4</span>, <span class="attr">name</span>:<span class="string">&#x27;d&#x27;</span>&#125;,</span><br><span class="line">            ],</span><br><span class="line">      user:&#123;</span><br><span class="line">            id:<span class="number">1</span>,</span><br><span class="line">            name: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">            gender: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h3 id="v-for循环数组"><a href="#v-for循环数组" class="headerlink" title="v-for循环数组"></a>v-for循环数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--item为每一项的值，i为每一项的下标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in list1&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;------index:&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-09-02_08-18-08.jpg"></p><h3 id="v-for循环对象数组"><a href="#v-for循环对象数组" class="headerlink" title="v-for循环对象数组"></a>v-for循环对象数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;usr in list2&quot;</span>&gt;</span>&#123;&#123; usr.id &#125;&#125;------name:&#123;&#123; usr.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-09-02_08-21-45.jpg"></p><h3 id="v-for循环对象"><a href="#v-for循环对象" class="headerlink" title="v-for循环对象"></a>v-for循环对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, key, index) in user&quot;</span>&gt;</span>value:&#123;&#123;val&#125;&#125;---key:&#123;&#123;key&#125;&#125;--index:&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-09-02_08-25-53.jpg"></p><h3 id="v-for迭代数字"><a href="#v-for迭代数字" class="headerlink" title="v-for迭代数字"></a>v-for迭代数字</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;count in 10&quot;</span>&gt;</span>loop&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-09-02_09-06-44.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Vue笔记-Day3&quot;&gt;&lt;a href=&quot;#Vue笔记-Day3&quot; class=&quot;headerlink&quot; title=&quot;Vue笔记 Day3&quot;&gt;&lt;/a&gt;Vue笔记 Day3&lt;/h1&gt;&lt;h2 id=&quot;Vue中使用样式-css&quot;&gt;&lt;a href=&quot;#Vue中使用样式-css&quot; class=&quot;headerlink&quot; title=&quot;Vue中使用样式-css&quot;&gt;&lt;/a&gt;Vue中使用样式-css&lt;/h2&gt;&lt;p&gt;假设&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;标签中有样式，如下&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .red&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .thin&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .italic&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;: italic;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .active&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;css&quot;&gt;            &lt;span class=&quot;attribute&quot;&gt;letter-spacing&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0.5em&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Vue笔记" scheme="https://ego1st.cn/categories/Vue%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringBoot配置热部署</title>
    <link href="https://ego1st.cn/SpringBootHotDeploy/"/>
    <id>https://ego1st.cn/SpringBootHotDeploy/</id>
    <published>2019-08-27T13:06:24.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>spring为开发者提供了一个名为spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。<span id="more"></span>下面我们在IDEA中配置SpringBoot热部署。</p><h2 id="添加pom-xml依赖"><a href="#添加pom-xml依赖" class="headerlink" title="添加pom.xml依赖"></a>添加pom.xml依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="修改IDEA设置"><a href="#修改IDEA设置" class="headerlink" title="修改IDEA设置"></a>修改IDEA设置</h2><ol><li>File–&gt;Settings–&gt;Build,Execution,Depliyment–&gt;Compiler–&gt;Build Project automatically–&gt;打上√</li><li><code>Ctrl+Shift+Alt+/</code>组合键–&gt;选择registry–&gt;找到<code>Compiler autoMake allow when app running</code>打上 √</li></ol><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>这时候启动项目 然后修改代码就能实现热部署了</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为restart ClassLoader,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;spring为开发者提供了一个名为spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>持续化部署你的blog</title>
    <link href="https://ego1st.cn/TravisCIYourBlog/"/>
    <id>https://ego1st.cn/TravisCIYourBlog/</id>
    <published>2019-08-13T15:36:06.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>上一周把自己的博客搬到新买的腾讯云上了，为了节省部署的时间，所以我的博客使用了持续化部署，其中踩了许多坑，写个教程总结记录一下。  </p><span id="more"></span><p>大概的过程：</p><ol><li><p>首先在你的服务器上安装Git，搭建Git服务器，并使用免密登陆SSH</p></li><li><p>在服务器上创建仓库用来存放TravisCI生成的博客静态文件</p></li><li><p>把你的博客项目放在GitHub上，其中博客静态文件放在主分支（master）上，其他文件（博客项目）放在其他分支上（本文为hexo分支）</p></li><li><p>配置TravisCI，监听你的hexo分支，即你写完博客，push到GitHub上，TravisCI监听到hexo分支发生改变，自动帮你构建博客静态文件</p></li><li><p>TravisCI帮你构建完静态文件后，通过git命令把博客静态文件push到博客仓库主分支上和你的服务器Git仓库中</p></li><li><p>配置服务器Git仓库钩子（GitHooks），使服务器仓库发现有push到仓库的动作后，自动把仓库中的静态文件部署到网站根目录</p></li></ol><h1 id="在VPS上搭建Git服务端"><a href="#在VPS上搭建Git服务端" class="headerlink" title="在VPS上搭建Git服务端"></a>在VPS上搭建Git服务端</h1><p>默认使用的操作系统为Centos7  </p><h2 id="安装Git服务"><a href="#安装Git服务" class="headerlink" title="安装Git服务"></a>安装Git服务</h2><p>首先查看yum源仓库的Git信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum info git</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-14_16-33-13.jpg"></p><p>版本是1.8.3.1，想使用最新版的Git，只能使用编译安装  </p><h3 id="下载Git："><a href="#下载Git：" class="headerlink" title="下载Git："></a>下载Git：</h3><p>Git<a href="https://pan.baidu.com/s/1HEz1isggSfyDXnfrITBSTA" title="With a Title">下载地址</a>. 提取码: ugu2</p><h3 id="在Centos7中安装依赖库"><a href="#在Centos7中安装依赖库" class="headerlink" title="在Centos7中安装依赖库"></a>在Centos7中安装依赖库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc perl-ExtUtils-MakeMaker</span></span><br></pre></td></tr></table></figure><h3 id="卸载低版本Git"><a href="#卸载低版本Git" class="headerlink" title="卸载低版本Git"></a>卸载低版本Git</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><h3 id="解压编译安装Git"><a href="#解压编译安装Git" class="headerlink" title="解压编译安装Git"></a>解压编译安装Git</h3><p>移动到存放Git源码的目录，我的在<code>/usr/local/git </code>git目录自己创建  </p><p>解压编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -xzvf git-2.22.0.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git-2.22.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span>/git all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span>/git install</span></span><br></pre></td></tr></table></figure><p>添加到环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/profile</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在末尾添加</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/git/bin:<span class="variable">$PATH</span>&quot;</span></span></span><br></pre></td></tr></table></figure><p>保存退出，使配置立即生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git --version  <span class="comment">#查看版本号</span></span></span><br></pre></td></tr></table></figure><p>将git设置为默认路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/git/bin/git-upload-pack /usr/bin/git-upload-pack</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> ln -s /usr/<span class="built_in">local</span>/git/bin/git-receive-pack /usr/bin/git-receive-pack</span> </span><br></pre></td></tr></table></figure><p>创建一个git用户组和用户，用来运行git服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> groupadd git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd git -g git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd git <span class="comment">#参数是用户名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> su git  <span class="comment">#切换git用户</span></span></span><br></pre></td></tr></table></figure><h2 id="在服务器上搭建Git仓库"><a href="#在服务器上搭建Git仓库" class="headerlink" title="在服务器上搭建Git仓库"></a>在服务器上搭建Git仓库</h2><h3 id="创建仓库目录"><a href="#创建仓库目录" class="headerlink" title="创建仓库目录"></a>创建仓库目录</h3><p>我的仓库目录在<code>/srv/gitrepo</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /srv/gitrepo <span class="comment"># gitrepo目录自己创建</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git init blog.git --bare <span class="comment"># 创建仓库目录</span></span></span><br></pre></td></tr></table></figure><p>至此，一个服务器Git仓库就搭建好了，还没实现免密登陆，后面会讲到</p><h1 id="使用TravisCI持续化部署"><a href="#使用TravisCI持续化部署" class="headerlink" title="使用TravisCI持续化部署"></a>使用TravisCI持续化部署</h1><h2 id="配置TravisCI"><a href="#配置TravisCI" class="headerlink" title="配置TravisCI"></a>配置TravisCI</h2><h3 id="使用Github账号登陆TravisCI"><a href="#使用Github账号登陆TravisCI" class="headerlink" title="使用Github账号登陆TravisCI"></a>使用Github账号登陆TravisCI</h3><p><a href="%5Bhttps://travis-ci.org%5D">TravisCi</a>,注意网站地址结尾是org（公开的），com结尾的是私有的，是收费的</p><h3 id="添加你的仓库"><a href="#添加你的仓库" class="headerlink" title="添加你的仓库"></a>添加你的仓库</h3><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-14_17-19-07.jpg"></p><h3 id="配置你的仓库"><a href="#配置你的仓库" class="headerlink" title="配置你的仓库"></a>配置你的仓库</h3><p>点击<code>Setting</code> ，设置选项<br><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-14_17-22-28.jpg"></p><h3 id="在Github添加Access-Token"><a href="#在Github添加Access-Token" class="headerlink" title="在Github添加Access Token"></a>在Github添加Access Token</h3><p><code>Setting</code>–&gt;<code>Developer setting</code>–&gt;<code>Personal access tokens</code>–&gt;<code>Generate new token</code><br><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-14_17-27-04.jpg">除了删库，其他的都打上勾</p><h3 id="在TravisCI设置中添加token"><a href="#在TravisCI设置中添加token" class="headerlink" title="在TravisCI设置中添加token"></a>在TravisCI设置中添加token</h3><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-14_17-31-40.jpg"></p><p><code>name</code>自定义 ，<code>value</code>为Github上的<code>access Token</code>点击Add添加 </p><h3 id="在你的本地博客目录下添加-travis-yml"><a href="#在你的本地博客目录下添加-travis-yml" class="headerlink" title="在你的本地博客目录下添加.travis.yml"></a>在你的本地博客目录下添加<code>.travis.yml</code></h3><p>具体配置如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">lts/*</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;&quot;</span> <span class="comment"># 你的Git名字</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;&quot;</span> <span class="comment"># 你的Git邮箱</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">&quot;Update docs with TRAVIS-CI&quot;</span> <span class="comment"># conmmit信息</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">&quot;https://$&#123;myblog&#125;@$&#123;GH_REF&#125;&quot;</span> <span class="string">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="comment"># 监听hexo分支变化，具体把源文件提交到分支，请左转度娘</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/EGo14T/ego14t.github.io.git</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">yarn:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="attr">after_success:</span></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="comment"># 给Travis服务器添加你的VPS ip地址，以跳过询问</span></span><br></pre></td></tr></table></figure><p>到这一步你已经可以自动部署你的博客到Github Pages了</p><h2 id="Travis免密登陆你的VPS"><a href="#Travis免密登陆你的VPS" class="headerlink" title="Travis免密登陆你的VPS"></a>Travis免密登陆你的VPS</h2><h3 id="生成SSH密钥对"><a href="#生成SSH密钥对" class="headerlink" title="生成SSH密钥对"></a>生成SSH密钥对</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 随便生成在哪都行，文件名也随意</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -f travis.key</span></span><br></pre></td></tr></table></figure><p>把生成的公钥文件<code>e.g. travis.key.pub</code> 内容添加到VPS上的<code>~/.ssh/authorized_keys</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi ~/.ssh/authorized_keys <span class="comment">#把公钥添加进去</span></span></span><br></pre></td></tr></table></figure><h3 id="使用Travis-CI-加密工具加密私钥"><a href="#使用Travis-CI-加密工具加密私钥" class="headerlink" title="使用Travis CI 加密工具加密私钥"></a>使用Travis CI 加密工具加密私钥</h3><p>这个步骤必须在Linux下执行！！！</p><p>这个步骤必须在Linux下执行！！！</p><p>这个步骤必须在Linux下执行！！！ 重要的事情说三遍</p><h4 id="安装加密工具"><a href="#安装加密工具" class="headerlink" title="安装加密工具"></a>安装加密工具</h4><p>首先你要安装Ruby，具体安装，自己百度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装加密工具</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gem install travis</span></span><br></pre></td></tr></table></figure><h4 id="通过命令行登录-Travis-并加密文件："><a href="#通过命令行登录-Travis-并加密文件：" class="headerlink" title="通过命令行登录 Travis 并加密文件："></a>通过命令行登录 Travis 并加密文件：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 交互式操作，使用 GitHub 账号密码登录</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> travis login --auto</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加密完成后会在当前目录下生成一个 travis.key.enc 文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会在你的 .travis.yml 文件里自动加上用于解密的 shell 语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 会自动格式化你的 .travis.yml 文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> travis encrypt-file travis.key -add</span></span><br></pre></td></tr></table></figure><p>以上步骤建议在你的博客项目根目录进行</p><p>把你的博客项目push到刚才创建的VPS Git仓库中</p><p>为了能免密登陆自己的VPS服务器，把刚才的私钥也拷贝一份放到<code>C:\Users\用户名\.ssh</code>目录下，然后push项目</p><p>然后在本地把加密操作后的项目从VPS Git仓库中clone下来</p><h2 id="使用GitHooks自动部署你的静态文件"><a href="#使用GitHooks自动部署你的静态文件" class="headerlink" title="使用GitHooks自动部署你的静态文件"></a>使用GitHooks自动部署你的静态文件</h2><p>首先要在<code>.travis.yml</code>文件中追加push到你的VPS Git仓库的命令</p><p>通过SSH的方式push</p><h3 id="配置GitHooks"><a href="#配置GitHooks" class="headerlink" title="配置GitHooks"></a>配置GitHooks</h3><p>在你的VPS Git仓库中找到hooks目录，在里面创建<code>post-receive</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /srv/gitrepo/myblog.git/hooks</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim post-receive <span class="comment"># 创建钩子文件</span></span></span><br></pre></td></tr></table></figure><p>文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">unset GIT_DIR</span><br><span class="line">path=/www/wwwroot/myblog/ #你的网站根目录，也是个git仓库，把你的项目从仓库中clone到这个地方</span><br><span class="line">cd $path</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><p>以上操作是在git用户下执行的</p><p>给脚本增加运行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>创建完之后，运行一下看看有没有异常</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./post-receive</span></span><br></pre></td></tr></table></figure><p>如果出现异常，请查看一下，网站根目录是否输入git用户，具体就是权限的问题</p><ol><li>必须保证git用户的根目录的文件夹权限为 755 </li><li>必须保证git用户的根目录下的.ssh文件夹权限为 700 </li><li>必须保证git用户的根目录下的.ssh文件夹中的authorized_keys文件的权限为 600</li></ol><h2 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h2><p>此时，你就可以写好博客然后push到Git仓库，TravisCI检测到你的分支发生变动，自动帮你执行<code>hexo g -d</code>的操作，然后把生成的文件提交Git仓库的master分支上，供Github Pages使用，还会提交一份到你的VPS Git仓库中，你的VPS Git仓库检测到有push行为，会触发Git Hooks，然后执行部署操作</p><p>有些地方描述的可能有些模糊，还请多去百度~~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;上一周把自己的博客搬到新买的腾讯云上了，为了节省部署的时间，所以我的博客使用了持续化部署，其中踩了许多坑，写个教程总结记录一下。  &lt;/p&gt;</summary>
    
    
    
    <category term="技术教程" scheme="https://ego1st.cn/categories/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>SpringCloud之eureka的搭建</title>
    <link href="https://ego1st.cn/SpringCloud-BuildEureka/"/>
    <id>https://ego1st.cn/SpringCloud-BuildEureka/</id>
    <published>2019-08-12T10:52:29.000Z</published>
    <updated>2021-04-26T06:59:27.217Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud是目前用于开发微服务的主流框架之一，我们都知道在微服务架构中最为基础、核心的模块，就是服务注册与发现。在Spring Cloud里我们可以使用它的Eureka模块来实现服务注册与发现，Spring Cloud Eureka是基于Netflix Eureka做了二次封装，它主要负责完成各个微服务实例的自动化注册和发现功能。  </p><p>Eureka由两个组件组成：</p><ol><li><p>Eureka Server（注册中心）</p></li><li><p>Eureka Client （服务注册）</p></li></ol><span id="more"></span><h1 id="Eurek-Server搭建"><a href="#Eurek-Server搭建" class="headerlink" title="Eurek Server搭建"></a>Eurek Server搭建</h1><h2 id="在IDEA中新建一个Spring-boot项目"><a href="#在IDEA中新建一个Spring-boot项目" class="headerlink" title="在IDEA中新建一个Spring boot项目"></a>在IDEA中新建一个Spring boot项目</h2><p>填写项目名之后，添加依赖，选择Spring Cloud Discovery–&gt;Eureka Server，如图：</p><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-12_11-00-21.jpg"></p><p>pom.xml文件的依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改主类"><a href="#改主类" class="headerlink" title="改主类"></a>改主类</h2><p>在主类上添加<code>@EnableEurekaServer</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"><span class="comment">//开启Eureka服务注册中心</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XinmusicEurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(XinmusicEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置application-yml"><a href="#配置application-yml" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span> <span class="comment"># 服务端口号</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment"># 注册中心IP地址</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registerWithEureka:</span> <span class="literal">false</span> <span class="comment"># 指定不进行注册操作，默认为true，若进行注册的话，会显示在Eureka信息面板上</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span> <span class="comment"># # 实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true 如果是做高可用的发现服务那就要改成true</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span> <span class="comment"># 指定注册中心的地址</span></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-12_11-23-22.jpg"></p><h1 id="Eureka-Client的使用"><a href="#Eureka-Client的使用" class="headerlink" title="Eureka Client的使用"></a>Eureka Client的使用</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在已有的项目中添加依赖，在pom.xml中添加依赖，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="改主类-1"><a href="#改主类-1" class="headerlink" title="改主类"></a>改主类</h2><p>在服务提供者项目主类上添加注解<code>@EnableDiscoveryClient</code>声明这是一个eureka client，进行服务注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XinmusicApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(XinmusicApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置application-yml-1"><a href="#配置application-yml-1" class="headerlink" title="配置application.yml"></a>配置application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:8081/eureka/</span>  <span class="comment"># eureka注册中心的地址</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">music-list-service</span> <span class="comment">#服务名称--调用的时候根据名称来调用该服务的方法</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span> <span class="comment"># 该项目的启动端口</span></span><br></pre></td></tr></table></figure><h2 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h2><p>启动后，在<code>Instances currently registered with Eureka</code>中可看到Eureka客户端的信息</p><p><img src="https://cdn.ego1st.cn/postImg/Snipaste_2019-08-12_11-40-27.jpg"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring Cloud是目前用于开发微服务的主流框架之一，我们都知道在微服务架构中最为基础、核心的模块，就是服务注册与发现。在Spring Cloud里我们可以使用它的Eureka模块来实现服务注册与发现，Spring Cloud Eureka是基于Netflix Eureka做了二次封装，它主要负责完成各个微服务实例的自动化注册和发现功能。  &lt;/p&gt;
&lt;p&gt;Eureka由两个组件组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Eureka Server（注册中心）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eureka Client （服务注册）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://ego1st.cn/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="SpringCloud" scheme="https://ego1st.cn/tags/SpringCloud/"/>
    
  </entry>
  
</feed>
